!=============================================================================
! amrvacusr.t.poletest
!=============================================================================
!INCLUDE:amrvacnul/specialini.t
INCLUDE:amrvacnul/speciallog.t
INCLUDE:amrvacnul/specialbound.t
INCLUDE:amrvacnul/specialsource.t
!=============================================================================
subroutine initglobaldata_usr

include 'amrvacdef.f'
!-----------------------------------------------------------------------------
eqpar(gamma_)=1.4d0

end subroutine initglobaldata_usr
!=============================================================================
subroutine initonegrid_usr(ixG^L,ix^L,w,x)

! initialize one grid

include 'amrvacdef.f'

integer, intent(in) :: ixG^L, ix^L
double precision, intent(in) :: x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw)

double precision :: xx(ix^S), xshock, rho1, rho2, p1, p2, vx1, vx2
logical :: patchw(ixG^T)
!----------------------------------------------------------------------------

xx(ix^S)=x(ix^S,1)*dcos(x(ix^S,2))

xshock=-0.5d0

rho1=1.0d0
vx1=0.0d0
p1=1.0d0

rho2=0.125d0
vx2=0.0d0
p2=0.1d0

where(xx(ix^S)<=xshock)
   w(ix^S,rho_)=rho1
   w(ix^S,v1_)=vx1*dcos(x(ix^S,2))
   w(ix^S,v2_)=-vx1*dsin(x(ix^S,2))
   w(ix^S,p_)=p1
elsewhere
   w(ix^S,rho_)=rho2
   w(ix^S,v1_)=vx2*dcos(x(ix^S,2))
   w(ix^S,v2_)=-vx2*dsin(x(ix^S,2))
   w(ix^S,p_)=p2
endwhere

patchw(ix^S)=.false.
call conserve(ixG^L,ix^L,w,patchw)

end subroutine initonegrid_usr
!=============================================================================
! amrvacusr.t.poletest
!=============================================================================
