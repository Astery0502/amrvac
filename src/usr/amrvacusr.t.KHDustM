!=============================================================================
! amrvacusr.t.KHDustM

!INCLUDE:amrvacnul/specialini.t
!INCLUDE:amrvacnul/speciallog.t
INCLUDE:amrvacnul/specialbound.t
!INCLUDE:amrvacnul/specialsource.t
INCLUDE:amrvacnul/specialimpl.t
INCLUDE:amrvacnul/usrflags.t
INCLUDE:amrvacnul/correctaux_usr.t
!=============================================================================
subroutine initglobaldata_usr

include 'amrvacdef.f'

integer :: i
DOUBLE PRECISION :: r(0:^NDS)
logical, save :: first=.true.
!-----------------------------------------------------------------------------




eqpar(gamma_)=5.0d0/3.0d0


!=== set thickness of perturbed layer ===!
eqpar(layer_)=1.0d-1



eqpar(fracdust_) = 0.1d0    ! dust to gas density ratio
rhodust(1:^NDS)  = 3.3d0    ! density in the dust
eqpar(min_ar_) = 5.0d-7
eqpar(max_ar_) = 250.0d-7



eqpar(rho1_) = 1.0d-20
eqpar(rho2_) = 5.0d-21
eqpar(vel1_) = 5.0d4
eqpar(vel2_) = -5.0d4
eqpar(T1_)   = 1.0d2
eqpar(T2_)   = 2.0d2


normvar(0)     = 1.0d18          ! normalization for distance
normvar(rho_)  = 1.0d-21         ! normalization for rho
normvar(v1_)   = 1.0d7           ! normalization for speed


normvar(v2_)   = normvar(v1_)
{^IFTHREED 
normvar(v3_)   = normvar(v1_)
}
normt          = normvar(0)/normvar(v1_)
normvar(p_)    = normvar(rho_)*(normvar(v1_)**2)         
{normvar(rhod^DS_)   = normvar(rho_)\}
{^DS&{^C&normvar(v^Cd^DS_) = normvar(v^C_);}\}

rhodust(1:^NDS)  = rhodust(1:^NDS)/normvar(rhod1_)
eqpar(min_ar_)= eqpar(min_ar_)/normvar(0)
eqpar(max_ar_)= eqpar(max_ar_)/normvar(0)

!-------------------------------

! here the dust sizes are defined. Note that this is 
! now done differently for the method used in (van Marle et al. (2011)). 

! first dust sizes in Ndust bins, with all bins having equal total mass.
! To do this, assume the particle distribution goes as r^-3.5

r(0) = eqpar(min_ar_)
do i=1,^NDS
    r(i) = (dsqrt(r(i-1)) +(dsqrt(eqpar(max_ar_))- &
        dsqrt(eqpar(min_ar_)))/^NDS)**2.0d0
    dsdust(i) = r(i)-r(i-1)
end do    
! now calculate the weigthed mean size of each bin, again assuming n goes as r^-3.5
do i=1,^NDS
    sdust(i) = (5.0d0/3.0d0)*(r(i)**(-1.5d0) - r(i-1)**(-1.5d0)) &
        /(r(i)**(-2.5d0) - r(i-1)**(-2.5d0))
end do

if(first)then
  if(mype==0)then
    do i=1,^NDS
        write(*,*) 'Dust type ',i,': grain radius r=',sdust(i)*normvar(0)
    end do
    write(*,*)
    write(*,*)'Speed of sound = ',dsqrt(eqpar(gamma_)*kboltz*eqpar(T1_)/(eqpar(mu_)*mhydro))
    write(*,*)
  endif
  first=.false.
endif


do i=1,nw
   if(loglimit(i) .and. (.not. (i==rho_ .or. i==p_))) then
   call mpistop( ' Taking the logarithm of a negative number is a REALLY STUPID IDEA ')
   endif
enddo


end subroutine initglobaldata_usr
!=============================================================================
subroutine initonegrid_usr(ixG^L,ix^L,w,x)

! initialize one grid 

include 'amrvacdef.f'

integer, intent(in) :: ixG^L, ix^L
double precision, intent(in) :: x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw)

real rand
double precision :: mid_y, epsilon, kx, d
{^IFTHREED
double precision :: mid_z
}

logical :: patchw(ixG^T),random_bound
INTEGER, DIMENSION(:), ALLOCATABLE :: seed
double precision :: randarray(ixG^S)
integer :: ii,n
integer :: clock
!----------------------------------------------------------------------------

{^IFONED call mpistop("This is a 2D HD problem")}



random_bound = .false.
d=0.001d0       !Thickness Middle Layer


mid_y=(xprobmax2+xprobmin2)/2.0d0
{^IFTHREED
mid_z=(xprobmax3+xprobmin3)/2.0d0
}
epsilon=0.001d0
!kx=8.0d0*atan(one) ! 8.0d0*atan(one)=2*Pi
kx=0.7968/(2.0d0*d) ! most unstable mode
!kx=0.5/(2.0d0*d) ! unstable mode
epsilon = zero





if (random_bound) then
    where(x(ixG^S,2)<(mid_y-d))
       !=== Lower Part ===!
       w(ixG^S,rho_) = eqpar(rho1_)/normvar(rho_)
       w(ixG^S,v1_)  = eqpar(vel1_)/normvar(v1_)
       w(ixG^S,v2_)  = zero
{^IFTHREED 
       w(ixG^S,v3_)   = zero
}
       w(ixG^S,p_)   = eqpar(rho1_)*(kboltz/mhydro)*eqpar(T1_) / normvar(p_)

       {^DS&w(ixG^S,rhod^DS_) = eqpar(fracdust_)*w(ixG^S,rho_)/^NDS;}
       {^DS&w(ixG^S,v1d^DS_)  = w(ixG^S,v1_);}
       {^DS&w(ixG^S,v2d^DS_)  = w(ixG^S,v2_);}
{^IFTHREED 
       {^DS&w(ixG^S,v3d^DS_)  = zero;}
}
    end where
    where(x(ixG^S,2)>(mid_y+d))
       !=== Upper Part ===!
       w(ixG^S,rho_) = eqpar(rho1_)/normvar(rho_)
       w(ixG^S,v1_)  = eqpar(vel2_)/normvar(v1_)
       w(ixG^S,v2_)  = zero
{^IFTHREED 
       w(ixG^S,v3_)   = zero
}
       w(ixG^S,p_)   = eqpar(rho1_)*(kboltz/mhydro)*eqpar(T1_) / normvar(p_)

       {^DS&w(ixG^S,rhod^DS_) = eqpar(fracdust_)*w(ixG^S,rho_)/^NDS;}
       {^DS&w(ixG^S,v1d^DS_)  = w(ixG^S,v1_);}
       {^DS&w(ixG^S,v2d^DS_)  = w(ixG^S,v2_);}
{^IFTHREED 
       {^DS&w(ixG^S,v3d^DS_)  = zero;}
}
    end where
    where(x(ixG^S,2)<(mid_y+d) .and. x(ixG^S,2)>(mid_y-d))
       !=== Middle Part ===!
       w(ixG^S,rho_) = eqpar(rho1_)/normvar(rho_)
       w(ixG^S,v1_)  = (((eqpar(vel2_)-eqpar(vel1_))/(2*d))*x(ixG^S,2) + &
                        eqpar(vel2_) - ((eqpar(vel2_)-eqpar(vel1_))/(2*d))* &
                        (mid_y+d))/normvar(v1_)
       w(ixG^S,v2_)  = zero
{^IFTHREED 
       w(ixG^S,v3_)   = zero
 }
       w(ixG^S,p_)   = eqpar(rho1_)*(kboltz/mhydro)*eqpar(T1_) / normvar(p_)

       {^DS&w(ixG^S,rhod^DS_) = eqpar(fracdust_)*w(ixG^S,rho_)/^NDS;}
       {^DS&w(ixG^S,v1d^DS_)  = w(ixG^S,v1_);}
       {^DS&w(ixG^S,v2d^DS_)  = w(ixG^S,v2_);}
{^IFTHREED 
       {^DS&w(ixG^S,v3d^DS_)  = zero;}
}
    end where
else
    where(x(ixG^S,2)< mid_y-d+epsilon*sin(kx*x(ixG^S,1)))
       !=== Lower Part ===!
        w(ixG^S,rho_) = eqpar(rho1_)/normvar(rho_)
        w(ixG^S,v1_)  = eqpar(vel1_)/normvar(v1_)
       !w(ixG^S,rho_) = (atan((x(ixG^S,2)-mid_y-epsilon*sin(kx*x(ixG^S,1))/xprobmax1)/ &
! (0.1d0*eqpar(layer_)))/(atan(one)*2.0d0) + 0.5) *&
!(eqpar(rho2_)/normvar(rho_) - eqpar(rho1_)/normvar(rho_)) + eqpar(rho1_)/normvar(rho_)
!       w(ixG^S,v1_)  = atan(((x(ixG^S,2)-mid_y-epsilon*sin(kx*x(ixG^S,1)))/xprobmax1)/ &
!       (0.1d0*eqpar(layer_)))/atan(one) * eqpar(vel1_)/normvar(v1_)
{^IFTWOD
        w(ixG^S,v2_)  = (1.0d-3*(5.0d4)/normvar(v1_)) * &
dexp(-(x(ixG^S,2)-(mid_y+epsilon*sin(kx*x(ixG^S,1))))**2/(2.0d0*eqpar(layer_)**2)) &
*(sin(kx*x(ixG^S,1)))
!       w(ixG^S,v2_)  = zero
}
{^IFTHREED 
        w(ixG^S,v2_)= &
        (1.0d-3*(5.0d4)/normvar(v1_)) * &
        dexp(  -((x(ixG^S,2)-(mid_y+epsilon*sin(kx*x(ixG^S,1))))**2)  &
                /(2.0d0*eqpar(layer_)**2) &
               -((x(ixG^S,3)- mid_z)**2)/(2.0d0*((xprobmax3-xprobmin3)/10.0d0)**2) ) &
               * (sin(kx*x(ixG^S,1)))
        !w(ixG^S,v2_)   = zero
}
        w(ixG^S,p_)   = eqpar(rho1_)*(kboltz/mhydro)*eqpar(T1_) / normvar(p_)

       {^DS&w(ixG^S,rhod^DS_) = eqpar(fracdust_)*w(ixG^S,rho_)/^NDS;}
       {^DS&w(ixG^S,v1d^DS_)  = w(ixG^S,v1_);}
       {^DS&w(ixG^S,v2d^DS_)  = w(ixG^S,v2_);}
{^IFTHREED 
        {^DS&w(ixG^S,v3d^DS_)  = zero;}
}
    end where
    where(x(ixG^S,2)> mid_y+d+epsilon*sin(kx*x(ixG^S,1)))
      !=== Upper Part ===!
      w(ixG^S,rho_) = eqpar(rho1_)/normvar(rho_)
      w(ixG^S,v1_)  = eqpar(vel2_)/normvar(v1_)
      !w(ixG^S,rho_) = (atan((x(ixG^S,2)-mid_y-epsilon*sin(kx*x(ixG^S,1))/xprobmax1)/ &
!(0.1d0*eqpar(layer_)))/(atan(one)*2.0d0) + 0.5) *&
!(eqpar(rho2_)/normvar(rho_) - eqpar(rho1_)/normvar(rho_)) + eqpar(rho1_)/normvar(rho_)
!       w(ixG^S,v1_)  = atan(((x(ixG^S,2)-mid_y-epsilon*sin(kx*x(ixG^S,1)))/xprobmax1)/ &
!       (0.1d0*eqpar(layer_)))/atan(one) * eqpar(vel1_)/normvar(v1_)
{^IFTWOD
      w(ixG^S,v2_)  = (1.0d-3*(5.0d4)/normvar(v1_)) * &
dexp(-(x(ixG^S,2)-(mid_y+epsilon*sin(kx*x(ixG^S,1))))**2/(2.0d0*eqpar(layer_)**2)) &
*(sin(kx*x(ixG^S,1)))
!     w(ixG^S,v2_)  = zero
}
{^IFTHREED 
        w(ixG^S,v2_)= &
        (1.0d-3*(5.0d4)/normvar(v1_)) * &
        dexp(  -((x(ixG^S,2)-(mid_y+epsilon*sin(kx*x(ixG^S,1))))**2)  &
                /(2.0d0*eqpar(layer_)**2) &
               -((x(ixG^S,3)- mid_z)**2)/(2.0d0*((xprobmax3-xprobmin3)/10.0d0)**2) ) &
               * (sin(kx*x(ixG^S,1)))
}
        w(ixG^S,p_)   = eqpar(rho1_)*(kboltz/mhydro)*eqpar(T1_) / normvar(p_)

        {^DS&w(ixG^S,rhod^DS_) = eqpar(fracdust_)*w(ixG^S,rho_)/^NDS;}
        {^DS&w(ixG^S,v1d^DS_)  = w(ixG^S,v1_);}
        {^DS&w(ixG^S,v2d^DS_)  = w(ixG^S,v2_);}
{^IFTHREED 
        {^DS&w(ixG^S,v3d^DS_)  = zero;}
}
    end where
    where(x(ixG^S,2)<(mid_y+d+epsilon*sin(kx*x(ixG^S,1))) .and. &
            x(ixG^S,2)>(mid_y-d+epsilon*sin(kx*x(ixG^S,1))))
       !=== Middle Part ===!
        w(ixG^S,rho_) = eqpar(rho1_)/normvar(rho_)
        w(ixG^S,v1_)  = (((eqpar(vel2_)-eqpar(vel1_))/(2*d))*x(ixG^S,2) + &
                        eqpar(vel2_) - ((eqpar(vel2_)-eqpar(vel1_))/(2*d))* &
                        (mid_y+d+epsilon*sin(kx*x(ixG^S,1))))/normvar(v1_)
{^IFTWOD
        w(ixG^S,v2_)=(1.0d-3*(5.0d4)/normvar(v1_)) * &
dexp(-(x(ixG^S,2)-(mid_y+epsilon*sin(kx*x(ixG^S,1))))**2/(2.0d0*eqpar(layer_)**2)) &
*(sin(kx*x(ixG^S,1)))                        
}
{^IFTHREED 
        w(ixG^S,v2_)= &
        (1.0d-3*(5.0d4)/normvar(v1_)) * &
        dexp(  -((x(ixG^S,2)-(mid_y+epsilon*sin(kx*x(ixG^S,1))))**2)  &
                /(2.0d0*eqpar(layer_)**2) &
               -((x(ixG^S,3)- mid_z)**2)/(2.0d0*((xprobmax3-xprobmin3)/10.0d0)**2) ) &
               * (sin(kx*x(ixG^S,1)))
}
        w(ixG^S,p_)   = eqpar(rho1_)*(kboltz/mhydro)*eqpar(T1_) / normvar(p_)

        {^DS&w(ixG^S,rhod^DS_) = eqpar(fracdust_)*w(ixG^S,rho_)/^NDS;}
        {^DS&w(ixG^S,v1d^DS_)  = w(ixG^S,v1_);}
        {^DS&w(ixG^S,v2d^DS_)  = w(ixG^S,v2_);}
{^IFTHREED 
        {^DS&w(ixG^S,v3d^DS_)  = zero;}
}
    end where
end if


if (random_bound) then
    !===== Set random velocities at the border =====!
	if( any( abs(x(ixG^S,2)-mid_y) < eqpar(layer_) ) ) then
		! Get random seed
   		CALL RANDOM_SEED(size = n)
   		ALLOCATE(seed(n))
   		CALL SYSTEM_CLOCK(COUNT=clock)  
   		seed = clock + 37 * (/ (ii - 1, ii = 1, n) /)
   		CALL RANDOM_SEED(PUT = seed)
   		DEALLOCATE(seed)
		! Generate array of random numbers with the size of the grid block
   		call random_number(randarray)
		w(ixG^S,v2_)= (randarray(ixG^S)*2.0d0 - 1.0d0)*dabs(5.0d4/normvar(v1_))*1.0d-3
	end if

end if



patchw(ix^S)=.false.
call conserve(ixG^L,ix^L,w,x,patchw)


end subroutine initonegrid_usr
!=============================================================================
subroutine specialsource(qdt,ixI^L,ixO^L,iw^LIM,qtC,wCT,qt,w,x)

! Calculate w(iw)=w(iw)+qdt*SOURCE[wCT,qtC,x] within ixO for all indices
! iw=iwmin...iwmax.  wCT is at time qCT

include 'amrvacdef.f'

integer, intent(in) :: ixI^L, ixO^L, iw^LIM
double precision, intent(in) :: qdt, qtC, qt, x(ixI^S,1:ndim)
double precision, intent(inout) :: wCT(ixI^S,1:nw), w(ixI^S,1:nw)

integer :: iw
!-----------------------------------------------------------------------------

! call addsource(qdt,ixI^L,ixO^L,iw^LIM,qtC,wCT,qt,w,x)

end subroutine specialsource
!=============================================================================
subroutine getdt_special(w,ixG^L,ix^L,dtnew,dx^D,x)

! Limit "dt" further if necessary, e.g. due to the special source terms.
! The getdt_courant (CFL condition) and the getdt subroutine in the AMRVACPHYS
! module have already been called.

include 'amrvacdef.f'

integer, intent(in) :: ixG^L, ix^L
double precision, intent(in) :: dx^D, x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw), dtnew
!-----------------------------------------------------------------------------

dtnew=bigdouble

end subroutine getdt_special
!=============================================================================
subroutine specialrefine_grid(igrid,level,ixG^L,ix^L,qt,w,x,refine,coarsen)

! Enforce additional refinement or coarsening
! One can use the coordinate info in x and/or time qt=t_n and w(t_n) values w.

! you must set consistent values for integers refine/coarsen:

! refine = -1 enforce to not refine
! refine =  0 doesn't enforce anything
! refine =  1 enforce refinement

! coarsen = -1 enforce to not coarsen
! coarsen =  0 doesn't enforce anything
! coarsen =  1 enforce coarsen

include 'amrvacdef.f'

integer, intent(in) :: igrid, level, ixG^L, ix^L
double precision, intent(in) :: qt, w(ixG^S,1:nw), x(ixG^S,1:ndim)
integer, intent(inout) :: refine, coarsen

double precision :: rad(ixG^T), mid_y
!-----------------------------------------------------------------------------

mid_y=(xprobmax2+xprobmin2)/2.0d0

if (.true.) then
    if ( any(abs(x(ixG^S,2)-mid_y) < eqpar(layer_)) ) then
       refine = 1
       coarsen = -1
    end if
end if

end subroutine specialrefine_grid
!=============================================================================
subroutine specialvarforerrest(ixI^L,ixO^L,iflag,w,var)

! this is the place to compute a local auxiliary variable to be used
! as refinement criterion for the Lohner error estimator only
!  -->it is then requiring and iflag>nw
! note that ixO=ixI=ixG, hence the term local (gradients need special attention!)

include 'amrvacdef.f'

integer, intent(in)          :: ixI^L,ixO^L,iflag
double precision, intent(in) :: w(ixI^S,1:nw)
double precision, intent(out):: var(ixG^T)
!-----------------------------------------------------------------------------

if (iflag >nw)call mpistop(' iflag> nw, make change in parfile or in user file')

var(ixI^S) = zero  

end subroutine specialvarforerrest
!=============================================================================
subroutine process_grid_usr(igrid,level,ixI^L,ixO^L,qt,w,x)

! this subroutine is ONLY to be used for computing auxiliary variables
! which happen to be non-local (like div v), and are in no way used for
! flux computations. As auxiliaries, they are also not advanced

include 'amrvacdef.f'

integer, intent(in):: igrid,level,ixI^L,ixO^L
double precision, intent(in):: qt,x(ixI^S,1:ndim)
double precision, intent(inout):: w(ixI^S,1:nw)
!-----------------------------------------------------------------------------

end subroutine process_grid_usr
!=============================================================================
subroutine specialvar_output(ixI^L,ixO^L,w,x,normconv)

! this subroutine can be used in convert, to add auxiliary variables to the
! converted output file, for further analysis using tecplot, paraview, ....
! these auxiliary values need to be stored in the nw+1:nw+nwauxio slots
!
! the array normconv can be filled in the (nw+1:nw+nwauxio) range with
! corresponding normalization values (default value 1)

include 'amrvacdef.f'

integer, intent(in)                :: ixI^L,ixO^L
double precision, intent(in)       :: x(ixI^S,1:ndim)
double precision                   :: w(ixI^S,nw+nwauxio)
double precision                   :: normconv(0:nw+nwauxio)


double precision :: current(ixG^T,7-2*ndir:3)

double precision                   :: gradrho(ixG^T),rho(ixG^T),drho(ixG^T)
double precision                   :: kk,kk0,grhomax,kk1
integer                            :: idims


integer, parameter:: idirmin0=7-2*ndir
integer :: idirmin,idir
double precision :: curlv(ixG^T,7-2*ndir:3),vvec(ixG^T,1:ndir)
!-----------------------------------------------------------------------------
!oktest = index(teststr,'printlog')>=1

if(saveprim)then
    vvec(ixI^S,1:ndir)=w(ixI^S,m0_+1:m0_+ndir)
    !write(*,*)'CAREFULL: saveprim might not work for Vorticity...'
else
 do idir=1,ndir
   vvec(ixI^S,idir)=w(ixI^S,m0_+idir)/w(ixI^S,rho_)
 enddo
endif
call curlvector(vvec,ixI^L,ixO^L,curlv,idirmin,idirmin0,ndir)

w(ixO^S,nw+1)=curlv(ixO^S,3)

end subroutine specialvar_output
!=============================================================================
subroutine specialvarnames_output

! newly added variables to be concatenated with the primnames/wnames string

include 'amrvacdef.f'
!-----------------------------------------------------------------------------
!oktest = index(teststr,'printlog')>=1

primnames= TRIM(primnames)//' '//'vort'
wnames=TRIM(wnames)//' '//'vort'

end subroutine specialvarnames_output
!=============================================================================
subroutine specialset_B0(ixI^L,ixO^L,x,wB0)

! Here one can add a steady (time-independent) potential background field

include 'amrvacdef.f'

integer, intent(in)           :: ixI^L,ixO^L
double precision, intent(in)  :: x(ixG^T,1:ndim)
double precision, intent(inout) :: wB0(ixI^S,1:ndir)
!-----------------------------------------------------------------------------
call mpistop(' abs(Busr)> 0, make change in parfile or in user file')

wB0(ixO^S,1:ndir)=wB0(ixO^S,1:ndir)
!!wB0(ixO^S,1:ndir)=wB0(ixO^S,1:ndir)+user defined steady potential field

end subroutine specialset_B0
!=============================================================================
subroutine printlog_special

! printlog: calculates volume averaged mean values 

include 'amrvacdef.f'

logical :: fileopen
integer :: iigrid, igrid, level, nleafs_level(1:nlevelshi), iw, i
double precision :: wmean(1:nw), volume(1:nlevelshi), volprob, voltotal
double precision :: dvolume(ixG^T), volumeflat(1:nlevelshi)
integer :: numlevels
integer, dimension(1:nlevelshi) :: isum_send, isum_recv
double precision, dimension(1:nw+1+nlevelshi) :: dsum_send, dsum_recv
character(len=80) :: filename
character(len=80) :: filedust
character(len=1024) :: line
character(len=80)  :: tempstring
logical, save :: opened=.false.
integer :: amode, status(MPI_STATUS_SIZE)


double precision :: totvort,kin2,initdens
double precision :: curlv(ixG^T,7-2*ndir:3),vvec(ixG^T,1:ndir)
integer          :: idirmin,idir
double precision :: totvort_send,totvort_recv,maxjz_recv,kin2_recv
double precision :: {^DS&kin2d^DS,kin2d^DS_recv}
double precision :: {^DS&max_rhod^DS,max_rhod^DS_recv,min_rhod^DS,min_rhod^DS_recv}
double precision :: {^DS&max_rhod^DS_global,min_rhod^DS_global}
double precision :: kinetic(ixG^T,1:^NDS)
double precision :: DensBin(1:6,1:^NDS),DensBin_recv(1:6,1:^NDS)

double precision :: member(ixG^T)
!-----------------------------------------------------------------------------
volume(1:mxnest)=zero
volumeflat(1:mxnest)=zero
wmean(1:nw)= zero
nleafs_level(1:mxnest)=0

totvort = zero
kin2 = zero
{^DS&kin2d^DS = zero \}
{^DS&max_rhod^DS_global = zero \}
{^DS&min_rhod^DS_global = 1.0d30 \}
DensBin(1:6,1:^NDS) = zero

do iigrid=1,igridstail; igrid=igrids(iigrid);
   ^D&dxlevel(^D)=rnode(rpdx^D_,igrid);
   level=node(plevel_,igrid)
   nleafs_level(level)=nleafs_level(level)+1
   volumeflat(level)=volumeflat(level)+ &
          {(rnode(rpxmax^D_,igrid)-rnode(rpxmin^D_,igrid))|*}
   if (slab) then
      dvolume(ixM^T)={rnode(rpdx^D_,igrid)|*}
   else
      dvolume(ixM^T)=pgeo(igrid)%dvolume(ixM^T)
      volume(level)=volume(level)+sum(dvolume(ixM^T))
   end if
   do iw=1,nw
      wmean(iw)=wmean(iw)+sum(dvolume(ixM^T)*pw(igrid)%w(ixM^T,iw))
   end do
   do idir=1,ndir
      vvec(ixM^T,idir)=pw(igrid)%w(ixM^T,m0_+idir)/pw(igrid)%w(ixM^T,rho_)
   enddo

   !compute vorticity, add total vorticity
   call curlvector(vvec,ixG^LL,ixM^LL,curlv,idirmin,3,ndir)
   totvort = totvort + sum(dvolume(ixM^T)*curlv(ixM^T,3))


   !compute kinetic energy in y-direction
   kin2 = kin2 + sum(dvolume(ixM^T) * pw(igrid)%w(ixM^T,m0_+2)**2.0d0 &
          /pw(igrid)%w(ixM^T,rho_))
   {^DS&where(pw(igrid)%w(ixM^T,rhod^DS_)>minrhod)
     kinetic(ixM^T,^DS) = dvolume(ixM^T) * &
     (pw(igrid)%w(ixM^T,m2d^DS_)**2.0d0)/pw(igrid)%w(ixM^T,rhod^DS_)
   elsewhere
     kinetic(ixM^T,^DS) = zero
   end where
   kin2d^DS = kin2d^DS + sum(kinetic(ixM^T,^DS))
   
   max_rhod^DS = maxval(pw(igrid)%w(ixM^T,rhod^DS_))
   max_rhod^DS_global = max(max_rhod^DS,max_rhod^DS_global)
   
   min_rhod^DS = minval(pw(igrid)%w(ixM^T,rhod^DS_))
   min_rhod^DS_global = min(min_rhod^DS,min_rhod^DS_global) \}




   ! Compute the total volume for each density bin
	initdens = (eqpar(rho1_)/normvar(rho_))*eqpar(fracdust_)/^NDS
	{^DS&where(pw(igrid)%w(ixM^T,rhod^DS_)<=0.001d0*initdens)
		member(ixM^T) = one
	elsewhere
		member(ixM^T) = zero
	end where
	DensBin(1,^DS) = DensBin(1,^DS) + sum(member(ixM^T)*dvolume(ixM^T))

	where(pw(igrid)%w(ixM^T,rhod^DS_)>0.001d0*initdens .and. pw(igrid)%w(ixM^T,rhod^DS_)<=0.01d0*initdens)
		member(ixM^T) = one
	elsewhere
		member(ixM^T) = zero
	end where
	DensBin(2,^DS) = DensBin(2,^DS) + sum(member(ixM^T)*dvolume(ixM^T))

	where(pw(igrid)%w(ixM^T,rhod^DS_)>0.01d0*initdens .and. pw(igrid)%w(ixM^T,rhod^DS_)<=0.5d0*initdens)
		member(ixM^T) = one
	elsewhere
		member(ixM^T) = zero
	end where
	DensBin(3,^DS) = DensBin(3,^DS) + sum(member(ixM^T)*dvolume(ixM^T))

	where(pw(igrid)%w(ixM^T,rhod^DS_)>0.5d0*initdens .and. pw(igrid)%w(ixM^T,rhod^DS_)<=2.0d0*initdens)
		member(ixM^T) = one
	elsewhere
		member(ixM^T) = zero
	end where
	DensBin(4,^DS) = DensBin(4,^DS) + sum(member(ixM^T)*dvolume(ixM^T))

	where(pw(igrid)%w(ixM^T,rhod^DS_)>2.0d0*initdens .and. pw(igrid)%w(ixM^T,rhod^DS_)<=10.0d0*initdens)
		member(ixM^T) = one
	elsewhere
		member(ixM^T) = zero
	end where
	DensBin(5,^DS) = DensBin(5,^DS) + sum(member(ixM^T)*dvolume(ixM^T))

	where(pw(igrid)%w(ixM^T,rhod^DS_)>10.0d0*initdens)
		member(ixM^T) = one
	elsewhere
		member(ixM^T) = zero
	end where
	DensBin(6,^DS) = DensBin(6,^DS) + sum(member(ixM^T)*dvolume(ixM^T))
	\ }	
   
   
end do
if (slab) volume(levmin:levmax)=volumeflat(levmin:levmax)

voltotal=sum(volume(levmin:levmax))

numlevels=levmax-levmin+1
dsum_send(1:nw)=wmean(1:nw)
dsum_send(nw+1)=voltotal
dsum_send(nw+2:nw+1+numlevels)=volumeflat(levmin:levmax)
call MPI_REDUCE(dsum_send,dsum_recv,nw+1+numlevels,MPI_DOUBLE_PRECISION, &
                MPI_SUM,0,icomm,ierrmpi)
isum_send(1:numlevels)=nleafs_level(levmin:levmax)
call MPI_REDUCE(isum_send,isum_recv,numlevels,MPI_INTEGER, &
                MPI_SUM,0,icomm,ierrmpi)

call MPI_REDUCE(totvort,totvort_recv,1,MPI_DOUBLE_PRECISION, &
		MPI_SUM,0,icomm,ierrmpi)
call MPI_REDUCE(kin2,kin2_recv,1,MPI_DOUBLE_PRECISION, &
		MPI_SUM,0,icomm,ierrmpi)
{^DS&call MPI_REDUCE(kin2d^DS,kin2d^DS_recv,1,MPI_DOUBLE_PRECISION, &
		MPI_SUM,0,icomm,ierrmpi)\}
{^DS&call MPI_REDUCE(max_rhod^DS_global,max_rhod^DS_recv,1,MPI_DOUBLE_PRECISION, &
		MPI_MAX,0,icomm,ierrmpi)\}		
{^DS&call MPI_REDUCE(min_rhod^DS_global,min_rhod^DS_recv,1,MPI_DOUBLE_PRECISION, &
		MPI_MIN,0,icomm,ierrmpi)\}		


call MPI_REDUCE(DensBin,DensBin_recv,6*^NDS,MPI_DOUBLE_PRECISION, &
                MPI_SUM,0,icomm,ierrmpi)

		
				
if (mype==0) then

   wmean(1:nw)=dsum_recv(1:nw)
   totvort=totvort_recv
   kin2 = kin2_recv
   {^DS&kin2d^DS = kin2d^DS_recv \}
   {^DS&max_rhod^DS = max_rhod^DS_recv \}
   {^DS&min_rhod^DS = min_rhod^DS_recv \}
      
   voltotal=dsum_recv(nw+1)
   volumeflat(levmin:levmax)=dsum_recv(nw+2:nw+1+numlevels)
   nleafs_level(levmin:levmax)=isum_recv(1:numlevels)

   wmean=wmean/voltotal
   kin2 = kin2/voltotal
   totvort = totvort/voltotal
   {^DS&kin2d^DS = kin2d^DS / voltotal \}
   ! determine coverage in coordinate space
   volprob={(xprobmax^D-xprobmin^D)|*}
   volumeflat(levmin:levmax)=volumeflat(levmin:levmax)/volprob

	DensBin(1:6,1:^NDS) = DensBin_recv(1:6,1:^NDS)/voltotal


	{^DS&
	write(filedust,"(a8,i1)") "DustBins",^DS

	OPEN (25+^DS, FILE = TRIM(filedust), ACCESS = 'APPEND',STATUS = 'UNKNOWN')
	write(25+^DS,'(7(e13.5))') t,DensBin(1,^DS),DensBin(2,^DS),DensBin(3,^DS),DensBin(4,^DS),DensBin(5,^DS),DensBin(6,^DS)
	CLOSE(25+^DS)
	\}	


   if (.not.opened) then
      ! generate filename
      write(filename,"(a,a)") TRIM(filenamelog),".log"

      amode=ior(MPI_MODE_CREATE,MPI_MODE_WRONLY)
      call MPI_FILE_OPEN(MPI_COMM_SELF,filename,amode, &
                         MPI_INFO_NULL,log_fh,ierrmpi)
      opened=.true.

      call MPI_FILE_WRITE(log_fh,fileheadout,len_trim(fileheadout), &
                          MPI_CHARACTER,status,ierrmpi)
      !!call MPI_FILE_WRITE(log_fh,new_line('a'),1,MPI_CHARACTER,status,ierrmpi)
      call MPI_FILE_WRITE(log_fh,achar(10),1,MPI_CHARACTER,status,ierrmpi)

      i=len_trim(wnames)-1
      do level=1,mxnest
          i=i+3
          if(level<10) then
            if (i+1<79) write(wnames(i:i+1),"(a,i1)") "c",level
          else
            if (i+2<79) write(wnames(i:i+2),"(a,i2)") "c",level
          endif
      end do
      do level=1,mxnest
          i=i+3
          if(level<10) then
            if (i+1<79) write(wnames(i:i+1),"(a,i1)") "n",level
          else
            if (i+2<79) write(wnames(i:i+2),"(a,i2)") "n",level
          endif
      end do
      if (time_accurate) then
         if(residmin>smalldouble) then
           write(line,'(a15,a79)')"it   t  dt res ",wnames
         else
           line = "it  t  dt vort kin2"
			  {^DS&
			  write(tempstring,"(a8,i1)") " kin2d",^DS
			  line = TRIM(line) // TRIM(tempstring)
			  \}
			  {^DS&
			  write(tempstring,"(a8,i1)") " max_rhod",^DS
			  line = TRIM(line) // TRIM(tempstring)
			  \}
			  {^DS&
			  write(tempstring,"(a8,i1)") " min_rhod",^DS
			  line = TRIM(line) // TRIM(tempstring)
			  \}
         endif
      else
         if(residmin>smalldouble) then
           write(line,'(a7,a79)')"it res ",wnames
         else
           write(line,'(a7,a79)')"it     ",wnames
         endif
      end if
      call MPI_FILE_WRITE(log_fh,line,len_trim(line),MPI_CHARACTER, &
                          status,ierrmpi)
   end if
   !!call MPI_FILE_WRITE(log_fh,new_line('a'),1,MPI_CHARACTER,status,ierrmpi)
   call MPI_FILE_WRITE(log_fh,achar(10),1,MPI_CHARACTER,status,ierrmpi)
	

	!Manualy specify output below!
   write(line,'(i7,16(e13.5))')it,t,dt,totvort,kin2,kin2d1,kin2d2,kin2d3,kin2d4,max_rhod1,max_rhod2,max_rhod3,max_rhod4,min_rhod1,min_rhod2,min_rhod3,min_rhod4
!   write(line,'(i7,10(e13.5))')it,t,dt,totvort,kin2,kin2d1,kin2d2,max_rhod1,max_rhod2,min_rhod1,min_rhod2

   

   call MPI_FILE_WRITE(log_fh,line,len_trim(line), &
                       MPI_CHARACTER,status,ierrmpi)
   do iw=1,nw
      write(line,'(e13.5)')wmean(iw)
      call MPI_FILE_WRITE(log_fh,line,len_trim(line), &
                          MPI_CHARACTER,status,ierrmpi)
   end do
   do level=1,mxnest
      write(line,'(e13.5)')volumeflat(level)
      call MPI_FILE_WRITE(log_fh,line,len_trim(line), &
                          MPI_CHARACTER,status,ierrmpi)
   end do
   do level=1,mxnest
      write(line,'(i6)') nleafs_level(level)
      call MPI_FILE_WRITE(log_fh,line,len_trim(line), &
                          MPI_CHARACTER,status,ierrmpi)
   end do
end if

end subroutine printlog_special
!=============================================================================
! amrvacusr.t.KHDustM
!=============================================================================
