!=============================================================================
! amrvacusr.t.srmhdROTORdivb

!INCLUDE:amrvacnul/specialini.t
!INCLUDE:amrvacnul/speciallog.t
INCLUDE:amrvacnul/specialbound.t
INCLUDE:amrvacnul/specialsource.t
!=============================================================================
subroutine initglobaldata_usr

include 'amrvacdef.f'
!-----------------------------------------------------------------------------
select case (iprob)
case (1)
   eqpar(gamma_) = 4.0d0/3.0d0
case (2)
   eqpar(gamma_) = 5.0d0/3.0d0
case default
   call mpistop("iprob not available!")
end select

end subroutine initglobaldata_usr
!=============================================================================
subroutine initonegrid_usr(ixG^L,ix^L,w,x)

! initialize one grid within ix^L

include 'amrvacdef.f'

integer, intent(in) :: ixG^L, ix^L
double precision, intent(in) :: x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw)

logical, save :: first=.true.

logical :: patchw(ixG^T)
double precision :: InitRadius, Middle^D, omega
!-----------------------------------------------------------------------------

if(mype==0)then
   if (first) then
      print*,'Setting up initial conditions for rotor problem',iprob
   end if
end if

select case (iprob)
case (1)
   {Middle^D = xprobmin^D + half*(xprobmax^D-xprobmin^D)\}
   InitRadius = 8.0d-2
   omega=zero
   where({^D&(x(ix^S,^D)-Middle^D)**2+}<=InitRadius**2)
      w(ix^S,rho_)       = 1.0d0
      {^C&w(ix^S,v^C_)   = zero \}
      w(ix^S,pp_)        = 1.0d3 
      w(ix^S,b1_)        = 4.0d0
      w(ix^S,b2_)        = 0.0d0        
   elsewhere
      w(ix^S,rho_)       = 1.0d0
      {^C&w(ix^S,v^C_)   = zero \}
      w(ix^S,pp_)        = 1.0d-2 
      w(ix^S,b1_)        = 4.0d0
      w(ix^S,b2_)        = 0.0d0        
   endwhere
case (2)
   {Middle^D = xprobmin^D + half*(xprobmax^D-xprobmin^D)\}
   InitRadius = 0.1d0
   omega = 9.95d0
   where({^D&(x(ix^S,^D)-Middle^D)**2+}<=InitRadius**2)
      w(ix^S,rho_)       = 1.0d1
      w(ix^S,v1_)        = -omega*(x(ix^S,2)-Middle2)
      w(ix^S,v2_)        =  omega*(x(ix^S,1)-Middle1)
      w(ix^S,pp_)        = 1.0d0 
      w(ix^S,b1_)        = 1.0d0
      w(ix^S,b2_)        = 0.0d0        
   elsewhere
      w(ix^S,rho_)       = 1.0d0
      {^C&w(ix^S,v^C_)   = zero \}
      w(ix^S,pp_)        = 1.0d0 
      w(ix^S,b1_)        = 1.0d0
      w(ix^S,b2_)        = 0.0d0        
   endwhere
case default
   call mpistop("iprob not available!")
end select
  
w(ix^S,lfac_)=one/dsqrt(one-({^C&w(ix^S,v^C_)**2+}))

if (useprimitiveRel) then
   {^C&w(ix^S,u^C_)=w(ix^S,lfac_)*w(ix^S,v^C_)\}
end if
  
patchw(ixG^S)=.false.
call conserve(ixG^L,ix^L,w,patchw)

if (first) then
   if(mype==0)then
     print*,'Rotor problem with omega=',omega
     print *,'gamma=',eqpar(gamma_)
     print*,'initial rotor radius=',InitRadius
   end if
   first=.false.
end if

end subroutine initonegrid_usr
!=============================================================================
subroutine printlog_special

! printlog: calculates volume averaged mean values 

include 'amrvacdef.f'

logical :: fileopen
integer :: iigrid, igrid, level, nleafs_level(1:nlevelshi), iw, i,ix^L
double precision :: wmean(1:nw), volume(1:nlevelshi), volprob, voltotal
double precision :: dvolume(ixG^T), volumeflat(1:nlevelshi)
integer :: numlevels,imon,idim
integer, dimension(1:nlevelshi) :: isum_send, isum_recv
double precision, dimension(1:3) :: divb_recv,divbmon,divbmon_mype, wmeandivb
double precision, dimension(1:nw+4+nlevelshi) :: dsum_send, dsum_recv
double precision, dimension(ixG^T) :: Bnorm,divbgrid,tmp
double precision, dimension(ixG^T) :: gradBnorm,divbonb,divbongradBnorm
double precision :: epsilon
character(len=80) :: filename
character(len=1024) :: line
logical, save :: opened=.false.
integer :: amode, status(MPI_STATUS_SIZE)
!-----------------------------------------------------------------------------
oktest = index(teststr,'printlog')>=1
volume(1:mxnest)=zero
volumeflat(1:mxnest)=zero
wmean(1:nw)= zero
wmeandivb(1:3)= zero
nleafs_level(1:mxnest)=0
divbmon_mype(1:3)=zero

epsilon=1.0d-16


do iigrid=1,igridstail; igrid=igrids(iigrid);
   level=node(plevel_,igrid)
   nleafs_level(level)=nleafs_level(level)+1
   volumeflat(level)=volumeflat(level)+ &
          {(rnode(rpxmax^D_,igrid)-rnode(rpxmin^D_,igrid))|*}
   if (slab) then
      dvolume(ixM^T)={rnode(rpdx^D_,igrid)|*}
   else
      dvolume(ixM^T)=pgeo(igrid)%dvolume(ixM^T)
      volume(level)=volume(level)+sum(dvolume(ixM^T))
   end if
   ! set dxlevel for use in getdivb (calls gradient) and for gradient evaluation
   ^D&dxlevel(^D)=rnode(rpdx^D_,igrid);
   Bnorm(ixG^T)=dsqrt( {^C&pw(igrid)%w(ixG^T,b^C_)**2+} )
   call getdivb(pw(igrid)%w,ixG^LL,ixM^LL,divbgrid)
   gradBnorm(ixM^T)=zero
   do idim=1,ndim
     call gradient(Bnorm,ixG^LL,ixM^LL,idim,tmp)
     gradBnorm(ixM^T)=gradBnorm(ixM^T)+tmp(ixM^T)**2
   end do
   gradBnorm(ixM^T)=dsqrt(gradBnorm(ixM^T))
   divbgrid(ixM^T)=dabs(divbgrid(ixM^T))
   where(Bnorm(ixM^T)>epsilon) 
     divbonb(ixM^T)=divbgrid(ixM^T)/Bnorm(ixM^T)
   elsewhere
     divbonb(ixM^T)=divbgrid(ixM^T)/epsilon
   endwhere
   where(gradBnorm(ixM^T)>epsilon) 
     divbongradBnorm(ixM^T)=divbgrid(ixM^T)/gradBnorm(ixM^T)
   elsewhere
     divbongradBnorm(ixM^T)=divbgrid(ixM^T)/epsilon
   endwhere
   divbmon_mype(1)=max(divbmon_mype(1),maxval(divbgrid(ixM^T)))
   divbmon_mype(2)=max(divbmon_mype(2),maxval(divbonb(ixM^T)))
   divbmon_mype(3)=max(divbmon_mype(3),maxval(divbongradBnorm(ixM^T)))
   do iw=1,nw
      wmean(iw)=wmean(iw)+sum(dvolume(ixM^T)*pw(igrid)%w(ixM^T,iw))
   end do
   wmeandivb(1)=wmeandivb(1)+sum(dvolume(ixM^T)*divbgrid(ixM^T))
   wmeandivb(2)=wmeandivb(2)+sum(dvolume(ixM^T)*divbonb(ixM^T))
   wmeandivb(3)=wmeandivb(3)+sum(dvolume(ixM^T)*divbongradBnorm(ixM^T))
end do
if (slab) volume(levmin:levmax)=volumeflat(levmin:levmax)

voltotal=sum(volume(levmin:levmax))

call MPI_REDUCE(divbmon_mype,divb_recv,3,MPI_DOUBLE_PRECISION, &
                MPI_MAX,0,icomm,ierrmpi)

numlevels=levmax-levmin+1
isum_send(1:numlevels)=nleafs_level(levmin:levmax)
dsum_send(1:nw)=wmean(1:nw)
dsum_send(nw+1)=voltotal
dsum_send(nw+2:nw+1+numlevels)=volumeflat(levmin:levmax)
dsum_send(nw+2+numlevels:nw+4+numlevels)=wmeandivb(1:3)
call MPI_REDUCE(dsum_send,dsum_recv,nw+4+numlevels,MPI_DOUBLE_PRECISION, &
                MPI_SUM,0,icomm,ierrmpi)
isum_send(1:numlevels)=nleafs_level(levmin:levmax)
call MPI_REDUCE(isum_send,isum_recv,numlevels,MPI_INTEGER, &
                MPI_SUM,0,icomm,ierrmpi)

if (mype==0) then

   divbmon(1:3)=divb_recv(1:3)
   wmean(1:nw)=dsum_recv(1:nw)
   wmeandivb(1:3)=dsum_recv(nw+2+numlevels:nw+4+numlevels)
   voltotal=dsum_recv(nw+1)
   volumeflat(levmin:levmax)=dsum_recv(nw+2:nw+1+numlevels)
   nleafs_level(levmin:levmax)=isum_recv(1:numlevels)

   wmean=wmean/voltotal
   wmeandivb=wmeandivb/voltotal

   ! determine coverage in coordinate space
   volprob={(xprobmax^D-xprobmin^D)|*}
   volumeflat(levmin:levmax)=volumeflat(levmin:levmax)/volprob

   if (.not.opened) then
      ! generate filename
      write(filename,"(a,a)") TRIM(filenamelog),".log"

      amode=ior(MPI_MODE_CREATE,MPI_MODE_WRONLY)
      call MPI_FILE_OPEN(MPI_COMM_SELF,filename,amode, &
                         MPI_INFO_NULL,log_fh,ierrmpi)
      opened=.true.

      call MPI_FILE_WRITE(log_fh,fileheadout,len_trim(fileheadout), &
                          MPI_CHARACTER,status,ierrmpi)
      !!call MPI_FILE_WRITE(log_fh,new_line('a'),1,MPI_CHARACTER,status,ierrmpi)
      call MPI_FILE_WRITE(log_fh,achar(10),1,MPI_CHARACTER,status,ierrmpi)

      i=len_trim(wnames)-1
      write(wnames(i+3:i+20),"(a17)") "d1 d2 d3 d4 d5 d6"
      i=i+20
      do level=1,mxnest
          !i=i+3
          i=i+2
          !write(wnames(i:i+1),"(a,i1)") "c",level
          write(wnames(i:i),"(a)") "c"
      end do
      do level=1,mxnest
          !i=i+3
          i=i+2
          !write(wnames(i:i+1),"(a,i1)") "n",level
          write(wnames(i:i),"(a)") "n"
      end do
      if (time_accurate) then
         write(line,'(a15,a79)')"it   t   dt    ",wnames
      else
         write(line,'(a5,a79)')"it   ",wnames
      end if
      call MPI_FILE_WRITE(log_fh,line,len_trim(line),MPI_CHARACTER, &
                          status,ierrmpi)
   end if
   !!call MPI_FILE_WRITE(log_fh,new_line('a'),1,MPI_CHARACTER,status,ierrmpi)
   call MPI_FILE_WRITE(log_fh,achar(10),1,MPI_CHARACTER,status,ierrmpi)

   if (time_accurate) then
      write(line,'(i7,2(e13.5))')it,t,dt
   else
      write(line,'(i7)')it
   end if
   call MPI_FILE_WRITE(log_fh,line,len_trim(line), &
                       MPI_CHARACTER,status,ierrmpi)
   do iw=1,nw
      write(line,'(e13.5)')wmean(iw)
      call MPI_FILE_WRITE(log_fh,line,len_trim(line), &
                          MPI_CHARACTER,status,ierrmpi)
   end do
   do imon=1,3
      write(line,'(e13.5)')divbmon(imon)
      call MPI_FILE_WRITE(log_fh,line,len_trim(line), &
                          MPI_CHARACTER,status,ierrmpi)
   end do
   do imon=1,3
      write(line,'(e13.5)')wmeandivb(imon)
      call MPI_FILE_WRITE(log_fh,line,len_trim(line), &
                          MPI_CHARACTER,status,ierrmpi)
   end do
   do level=1,mxnest
      write(line,'(e13.5)')volumeflat(level)
      call MPI_FILE_WRITE(log_fh,line,len_trim(line), &
                          MPI_CHARACTER,status,ierrmpi)
   end do
   do level=1,mxnest
      write(line,'(i6)') nleafs_level(level)
      call MPI_FILE_WRITE(log_fh,line,len_trim(line), &
                          MPI_CHARACTER,status,ierrmpi)
   end do
end if

end subroutine printlog_special
!=============================================================================
subroutine process_grid_usr(igrid,level,ixI^L,ixO^L,qt,w,x)

! this subroutine is ONLY to be used for computing auxiliary variables
! which happen to be non-local (like div v), and are in no way used for
! flux computations. As auxiliaries, they are also not advanced

include 'amrvacdef.f'

integer, intent(in):: igrid,level,ixI^L,ixO^L
double precision, intent(in):: qt,x(ixI^S,1:ndim)
double precision, intent(inout):: w(ixI^S,1:nw)
!-----------------------------------------------------------------------------

end subroutine process_grid_usr
!=============================================================================
subroutine specialvar_output(ixI^L,ixO^L,w,x,normconv)

! this subroutine can be used in convert, to add auxiliary variables to the
! converted output file, for further analysis using tecplot, paraview, ....
! these auxiliary values need to be stored in the nw+1:nw+nwauxio slots
!
! the array normconv can be filled in the (nw+1:nw+nwauxio) range with
! corresponding normalization values (default value 1)

include 'amrvacdef.f'

integer, intent(in)                :: ixI^L,ixO^L
double precision, intent(in)       :: x(ixI^S,1:ndim)
double precision                   :: w(ixI^S,nw+nwauxio)
double precision                   :: normconv(0:nw+nwauxio)

double precision                   :: gradrho(ixG^T),rho(ixG^T),drho(ixG^T)
double precision                   :: kk,kk0,grhomax,kk1
integer                            :: idims
!-----------------------------------------------------------------------------

rho(ixI^S)=w(ixI^S,rho_)
gradrho(ixO^S)=zero
do idims=1,ndim
   select case(typegrad)
   case("central")
     call gradient(rho,ixI^L,ixO^L,idims,drho)
   case("limited")
     call gradientS(rho,ixI^L,ixO^L,idims,drho)
   end select
   gradrho(ixO^S)=gradrho(ixO^S)+drho(ixO^S)**2.0d0
enddo
gradrho(ixO^S)=dsqrt(gradrho(ixO^S))
kk=5.0d0
kk0=0.01d0
kk1=1.0d0
grhomax=200.0d0
!print *,maxval(gradrho(ixO^S))

! putting the schlierplot of density in nwauxio=1
w(ixO^S,nw+1)=dexp(-kk*(gradrho(ixO^S)-kk0*grhomax)/(kk1*grhomax-kk0*grhomax))

if(useprimitiveRel)then
   w(ixO^S,nw+2)=-dsqrt(w(ixO^S,u1_)**2+w(ixO^S,u2_)**2)/w(ixO^S,lfac_)
else
   w(ixO^S,nw+2)=-dsqrt(w(ixO^S,v1_)**2+w(ixO^S,v2_)**2)
endif

end subroutine specialvar_output
!=============================================================================
subroutine specialvarnames_output

! newly added variables to be concatenated with the primnames/wnames string

include 'amrvacdef.f'
!-----------------------------------------------------------------------------

! Example : as above in specialvar_output, assuming relativistic HD here...
primnames= TRIM(primnames)//' '//'schlierho minv'
wnames=TRIM(wnames)//' '//'schlierd minv'

end subroutine specialvarnames_output
!=============================================================================
! amrvacusr.t.srmhdROTORdivb
!=============================================================================
