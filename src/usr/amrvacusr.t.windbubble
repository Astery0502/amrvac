!=============================================================================
! amrvacusr.t.windbubble
!=============================================================================
!INCLUDE:amrvacnul/specialini.t
!INCLUDE:amrvacnul/speciallog.t
!INCLUDE:amrvacnul/specialbound.t
!INCLUDE:amrvacnul/specialsource.t
!=============================================================================
subroutine initglobaldata_usr

include 'amrvacdef.f'
 
double precision:: rwind, runit, Tism, Tinf, Tratio, nism, rhoism, csinf
double precision:: msun, year, mdotstar, kboltz, mproton
!-----------------------------------------------------------------------------

eqpar(gamma_)=5.0d0/3.0d0

! true physical size for wind region, in meters
rwind=10000.0d0*1.496d0*1.0d11  ! 10000 AU
runit=10.0d0*rwind ! unit of length in meter
! size of wind region, dimensionless
eqpar(rw_)=0.1d0

! relative star-ISM velocity
select case(iprob)
  case(1)
    eqpar(vrel_)=0.0d0
  case(2)
    eqpar(vrel_)=0.4d0
  case(3)
    eqpar(vrel_)=1.1d0
  case(4)
    eqpar(vrel_)=0.1d0
  case(5)
    eqpar(vrel_)=0.3d0
  case default
    call mpistop("please implement iprob")
end select

! true temperatures for ISM and wind bubble
Tism=1000.0d0 ! in Kelvin
Tinf=10000.0d0 ! in Kelvin
Tratio=Tism/Tinf
! pressure of ISM, dimensionless
eqpar(pism_)=Tratio/eqpar(gamma_)

kboltz=1.381d0*1.0d-23  ! boltzman constant
mproton=1.673d0*1.0d-27 ! number density times proton mass
msun=1.989d0*1.0d30 ! solar mass in kg
year=365.0d0*24.0d0*60.0d0*60.0d0 ! year in seconds

! Mach number of bubble wind flow
eqpar(vrinf_)=2.0d0
! true number density for ISM, 1 cm^(-3)=10^6 m^(-3)
nism=1.0d6
! true density for ISM, kg m^(-3)
rhoism=nism*mproton ! number density times proton mass
! bubble sound speed in meter per second
csinf=dsqrt(eqpar(gamma_)*Tinf*kboltz/mproton)
mdotstar=1.0d-7*msun/year  ! mass loss rate in kg/sec
! stellar mass loss rate dimensionless
eqpar(mdot_)=mdotstar/(runit**2*rhoism*csinf)


end subroutine initglobaldata_usr
!=============================================================================
subroutine initonegrid_usr(ixG^L,ix^L,w,x)

! initialize one grid within ix^L

include 'amrvacdef.f'

integer, intent(in) :: ixG^L, ix^L
double precision, intent(in) :: x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw)

double precision :: rad(ixG^T)
double precision :: rbalance

logical :: patchw(ixG^T)

logical, save :: first=.true.
!-----------------------------------------------------------------------------

rad(ix^S)=dsqrt(^D&x(ix^S,^D)**2|+)

where(rad(ix^S)<eqpar(rw_))
  w(ix^S,rho_)=eqpar(mdot_)/(4.0d0*dpi*eqpar(vrinf_)*rad(ix^S)**2)
  {^D& w(ix^S,v^D_)=eqpar(vrinf_)*x(ix^S,^D)/rad(ix^S) \}
  w(ix^S,p_)=eqpar(mdot_)/(eqpar(gamma_)*4.0d0*dpi*eqpar(vrinf_)*rad(ix^S)**2)
elsewhere
  w(ix^S,rho_)=1.0d0
  w(ix^S,v1_)=zero
  {^IFTWOD
  w(ix^S,v2_)=-eqpar(vrel_)
  }
  {^IFTHREED
  w(ix^S,v2_)=-eqpar(vrel_)
  w(ix^S,v3_)=zero
  }
  w(ix^S,p_)=eqpar(pism_)
endwhere

patchw(ix^S)=.false.
call conserve(ixG^L,ix^L,w,patchw)

rbalance=dsqrt(eqpar(mdot_)*(one+eqpar(gamma_)*eqpar(vrinf_)**2) &
               /(4.0d0*dpi*eqpar(gamma_)*eqpar(vrinf_)*(eqpar(pism_)+eqpar(vrel_)**2)))

if(first)then
  if(mype==0)then
      write(*,*)'Doing wind bubble in dimension ',^ND
      write(*,*)'mdot, rw, pism, vrel, vrinf, gamma :'
      write(*,*) eqpar(mdot_),eqpar(rw_),eqpar(pism_),eqpar(vrel_),eqpar(vrinf_),eqpar(gamma_)
      write(*,*)'estimated size of bubble is', rbalance
      write(*,*)'compare to rw-rmax,zmax given by ',eqpar(rw_),xprobmax^D
  endif
  first=.false.
endif

if(rbalance<eqpar(rw_).or.{^D& rbalance>xprobmax^D|.or.}) then
  call mpistop("please adjust input parameters")
endif

end subroutine initonegrid_usr
!=============================================================================
subroutine specialbound_usr(qt,ixG^L,ixO^L,iw,iB,w,x)

! special boundary types, user defined

include 'amrvacdef.f'

integer, intent(in) :: ixG^L, ixO^L, iw, iB
double precision, intent(in) :: qt, x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw)

logical :: patchw(ixG^T)
!----------------------------------------------------------------------------

select case(iB)
! fixed at top
case(4)
   select case(iw)
   case(rho_)
    ! all special boundary settings done here
    w(ixO^S,rho_)=1.0d0
    w(ixO^S,v1_)=zero
    {^IFTWOD
    w(ixO^S,v2_)=-eqpar(vrel_)
    }
    {^IFTHREED
    w(ixO^S,v2_)=-eqpar(vrel_)
    w(ixO^S,v3_)=zero
    }
    w(ixO^S,p_)=eqpar(pism_)
 
    patchw(ixO^S)=.false.
    call conserve(ixG^L,ixO^L,w,patchw)

   ! dummy calls follow
   case(m1_) 
   {^NOONED 
   case(m2_) 
   }
   {^IFTHREED 
   case(m3_) 
   }
   case(e_)
   case default
      call mpistop("Special boundary is not defined for this variable")
   end select
case default
   call mpistop("Special boundary is not defined for this region")
end select


end subroutine specialbound_usr
!=============================================================================
subroutine specialsource(qdt,ixI^L,ixO^L,iw^LIM,qtC,wCT,qt,w,x)

! Calculate w(iw)=w(iw)+qdt*SOURCE[wCT,qtC,x] within ixO for all indices
! iw=iwmin...iwmax.  wCT is at time qCT

include 'amrvacdef.f'

integer, intent(in) :: ixI^L, ixO^L, iw^LIM
double precision, intent(in) :: qdt, qtC, qt, x(ixI^S,1:ndim)
double precision, intent(inout) :: wCT(ixI^S,1:nw), w(ixI^S,1:nw)

integer :: iw
double precision :: rad(ixG^T)
!-----------------------------------------------------------------------------

rad(ixO^S)=dsqrt(^D&x(ixO^S,^D)**2|+)

do iw= iw^LIM
   select case(iw)
   case(rho_)
      where(rad(ixO^S)<eqpar(rw_))
        w(ixO^S,rho_)=eqpar(mdot_)/(4.0d0*dpi*eqpar(vrinf_)*rad(ixO^S)**2)
      endwhere
   { case(m^D_)
      where(rad(ixO^S)<eqpar(rw_))
        w(ixO^S,m^D_)=(eqpar(vrinf_)*x(ixO^S,^D)/rad(ixO^S)) &
                    *eqpar(mdot_)/(4.0d0*dpi*eqpar(vrinf_)*rad(ixO^S)**2)
      endwhere
   }
   case(e_)
      where(rad(ixO^S)<eqpar(rw_))
        w(ixO^S,e_)=(eqpar(mdot_)/(4.0d0*dpi*eqpar(vrinf_)*rad(ixO^S)**2)) &
               *(one/(eqpar(gamma_)*(eqpar(gamma_)-one))+half*eqpar(vrinf_)**2)
      endwhere
   end select
end do

end subroutine specialsource
!=============================================================================
subroutine getdt_special(w,ixG^L,ix^L,dtnew,dx^D,x)

! Limit "dt" further if necessary, e.g. due to the special source terms.
! The getdt_courant (CFL condition) and the getdt subroutine in the AMRVACPHYS
! module have already been called.

include 'amrvacdef.f'

integer, intent(in) :: ixG^L, ix^L
double precision, intent(in) :: dx^D, x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw), dtnew
!-----------------------------------------------------------------------------

dtnew=bigdouble

end subroutine getdt_special
!=============================================================================
subroutine specialeta(w,ixI^L,ix^L,idirmin,x,current,eta)

! Set the "eta" array for resistive MHD based on w or the
! "current" variable which has components between idirmin and 3.

include 'amrvacdef.f'

integer, intent(in) :: ixI^L, ix^L, idirmin
double precision, intent(in) :: w(ixI^S,nw), x(ixI^S,1:ndim)

double precision :: current(ixG^T,7-2*ndir:3), eta(ixG^T)
!-----------------------------------------------------------------------------

!  eta(ix^S)=...

call mpistop("specialeta is not defined")

end subroutine specialeta
!=============================================================================
subroutine specialrefine_grid(igrid,level,ixG^L,ix^L,qt,w,x,refine,coarsen)

! Enforce additional refinement or coarsening
! One can use the coordinate info in x and/or time qt=t_n and w(t_n) values w.

! you must set consistent values for integers refine/coarsen:

! refine = -1 enforce to not refine
! refine =  0 doesn't enforce anything
! refine =  1 enforce refinement

! coarsen = -1 enforce to not coarsen
! coarsen =  0 doesn't enforce anything
! coarsen =  1 enforce coarsen

include 'amrvacdef.f'

integer, intent(in) :: igrid, level, ixG^L, ix^L
double precision, intent(in) :: qt, w(ixG^S,1:nw), x(ixG^S,1:ndim)
integer, intent(inout) :: refine, coarsen

double precision :: rad(ixG^T)
!-----------------------------------------------------------------------------

rad(ix^S)=dsqrt(^D&x(ix^S,^D)**2|+)

if (any(rad(ix^S) < two*eqpar(rw_))) then
  refine=1
  coarsen=-1
endif

end subroutine specialrefine_grid
!=============================================================================
subroutine specialvarforerrest(ixI^L,ixO^L,iflag,w,var)

! this is the place to compute a local auxiliary variable to be used
! as refinement criterion for the Lohner error estimator only
!  -->it is then requiring and iflag>nw
! note that ixO=ixI=ixG, hence the term local (gradients need special attention!)

include 'amrvacdef.f'

integer, intent(in)          :: ixI^L,ixO^L,iflag
double precision, intent(in) :: w(ixI^S,1:nw)
double precision, intent(out):: var(ixG^T)
!-----------------------------------------------------------------------------

if (iflag >nw)call mpistop(' iflag> nw, make change in parfile or in user file')

var(ixI^S) = zero 

end subroutine specialvarforerrest
!=============================================================================
subroutine printlog_special

include 'amrvacdef.f'
!-----------------------------------------------------------------------------
oktest = index(teststr,'printlog')>=1

call mpistop("special log file undefined")

end subroutine printlog_special
!=============================================================================
subroutine process_grid_usr(igrid,level,ixI^L,ixO^L,qt,w,x)

! this subroutine is ONLY to be used for computing auxiliary variables
! which happen to be non-local (like div v), and are in no way used for
! flux computations. As auxiliaries, they are also not advanced

include 'amrvacdef.f'

integer, intent(in):: igrid,level,ixI^L,ixO^L
double precision, intent(in):: qt,x(ixI^S,1:ndim)
double precision, intent(inout):: w(ixI^S,1:nw)
!-----------------------------------------------------------------------------

end subroutine process_grid_usr
!=============================================================================
subroutine specialvar_output(ixI^L,ixO^L,w,x,normconv)

! this subroutine can be used in convert, to add auxiliary variables to the
! converted output file, for further analysis using tecplot, paraview, ....
! these auxiliary values need to be stored in the nw+1:nw+nwauxio slots
!
! the array normconv can be filled in the (nw+1:nw+nwauxio) range with 
! corresponding normalization values (default value 1)

include 'amrvacdef.f'

integer, intent(in)                :: ixI^L,ixO^L
double precision, intent(in)       :: x(ixI^S,1:ndim)
double precision                   :: w(ixI^S,nw+nwauxio)
double precision                   :: normconv(0:nw+nwauxio)

double precision                   :: gradrho(ixG^T),rho(ixG^T),drho(ixG^T)
double precision                   :: kk,kk0,grhomax,kk1
integer                            :: idims
!-----------------------------------------------------------------------------

! Example: assuming nwauxio=2 at convert stage 

rho(ixI^S)=w(ixI^S,rho_)
gradrho(ixO^S)=zero
do idims=1,ndim
   select case(typegrad)
   case("central")
     call gradient(rho,ixO^L,idims,drho)
   case("limited")
     call gradientS(rho,ixO^L,idims,drho)
   end select
   gradrho(ixO^S)=gradrho(ixO^S)+drho(ixO^S)**2.0d0
enddo
gradrho(ixO^S)=dsqrt(gradrho(ixO^S))
kk=5.0d0
kk0=0.01d0
kk1=1.0d0
grhomax=10.0d0

! putting the schlierplot of density in nwauxio=1
w(ixO^S,nw+1)=dexp(-kk*(gradrho(ixO^S)-kk0*grhomax)/(kk1*grhomax-kk0*grhomax))
w(ixO^S,nw+2)=dlog10(w(ixO^S,rho_))

!!call mpistop("special output file undefined")


end subroutine specialvar_output
!=============================================================================
subroutine specialvarnames_output

! newly added variables to be concatenated with the primnames/wnames string

include 'amrvacdef.f'
!-----------------------------------------------------------------------------
oktest = index(teststr,'printlog')>=1

!!call mpistop("special wnames and primnames undefined")

! Example : as above in specialvar_output
primnames= TRIM(primnames)//' '//'schlierrho logrho'
wnames=TRIM(wnames)//' '//'schlierrho logrho'

end subroutine specialvarnames_output

!=============================================================================
subroutine bc_int(qt,ixG^L,ixO^L,w,x)

! internal boundary, user defined
!
! This subroutine can be used to artificially overwrite ALL conservative 
! variables in a user-selected region of the mesh, and thereby act as
! an internal boundary region. It is called just before external (ghost cell)
! boundary regions will be set by the BC selection. Here, you could e.g. 
! want to introduce an extra variable (nwextra, to be distinguished from nwaux)
! which can be used to identify the internal boundary region location.
! Its effect should always be local as it acts on the mesh.
!

include 'amrvacdef.f'

integer, intent(in) :: ixG^L,ixO^L
double precision, intent(in) :: qt
double precision, intent(inout) :: w(ixG^S,1:nw)
double precision, intent(in) :: x(ixG^S,1:ndim)

! .. local ..
!logical :: patchw(ixG^T)
!----------------------------------------------------------------------------

call mpistop("bc_int not defined")

! just to give an example for relativistic MHD
!  -----------------------------------------
!patchw(ixO^S)=.true.
!where (({^D&x(ixO^S,^D)**2+})<half**2.0d0) 
!    patchw(ixO^S) = .false.
!  ^C&w(ixO^S,v^C_)=zero;
!  ^C&w(ixO^S,b^C_)=zero;
!    w(ixO^S,b3_) = one
!    w(ixO^S,v1_) = 0.99
!    w(ixO^S,rho_) = 1.d0
!    w(ixO^S,pp_)  = 2.0d0
!    w(ixO^S,lfac_)=one/dsqrt(one-({^C&w(ixO^S,v^C_)**2.0d0+}))
!end where
!!if (useprimitiveRel) then
!!  where (({^D&x(ixO^S,^D)**2+})<half**2.0d0) 
!!  {^C&w(ixO^S,u^C_)=w(ixO^S,lfac_)*w(ixO^S,v^C_);\}
!!  end where
!!endif
!call conserve(ixG^L,ixO^L,w,patchw)

end subroutine bc_int
!=============================================================================
!=============================================================================
! amrvacusr.t.windbubble
!=============================================================================
