!=============================================================================
! amrvacusr.t.testsrhd
!=============================================================================
!INCLUDE:amrvacnul/specialini.t
INCLUDE:amrvacnul/speciallog.t
INCLUDE:amrvacnul/specialbound.t
!INCLUDE:amrvacnul/specialsource.t
!=============================================================================
subroutine initglobaldata_usr

include 'amrvacdef.f'
!-----------------------------------------------------------------------------

select case(iprob)
 case(1,2,3,4,5,6,7,8,9,10,12)
   eqpar(gamma_)=5.0d0/3.0d0
 case(11)
   eqpar(gamma_)=4.0d0/3.0d0
case default
  if (mype==0)write(unitterm,*) "Unknown iprob=",iprob
  call mpistop("error in initglobaldata_usr: unknown iprob")
end select

end subroutine initglobaldata_usr
!=============================================================================
subroutine initonegrid_usr(ixG^L,ix^L,w,x)

! initialize one grid

include 'amrvacdef.f'

integer, intent(in) :: ixG^L, ix^L
double precision, intent(in) :: x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw)

! .. local scalars ..
double precision:: rholeft,rhoright,pleft,pright,v1right,v1left,v2right,v2left,v3right,v3left
double precision:: startx1,startx2
double precision:: rhoNE,rhoNW,rhoSE,rhoSW,pNE,pNW,pSE,pSW
double precision:: v1ne,v1nw,v1se,v1sw
double precision:: v2ne,v2nw,v2se,v2sw
double precision:: v3ne,v3nw,v3se,v3sw

logical, save :: first=.true.
logical:: patchw(ixG^T)
!-----------------------------------------------------------------------------

if (iprob == 1) then
   ! left state
   rholeft=10.0d0
   pleft=13.3d0
   v1left=zero
   v2left=zero
   v3left=zero
   ! right state 
   rhoright=one 
   pright=0.66d-6
   v1right=zero
   v2right=zero
   v3right=zero
else if (iprob == 2)then
   ! left state
   rholeft=1.0d0
   pleft=1.0d3
   v1left=zero
   v2left=zero
   v3left=zero
   ! right state 
   rhoright=one 
   pright=1.0d-2
   v1right=zero
   v2right=zero
   v3right=zero
else if (iprob == 3)then
   ! left state
   rholeft=1.0d0
   pleft=1.0d3
   v1left=zero
   v2left=zero
   v3left=zero
   ! right state 
   rhoright=one 
   pright=1.0d-2
   v1right=zero
   v2right=0.9d0
   v3right=zero
else if (iprob == 4)then
   ! left state
   rholeft=1.0d0
   pleft=1.0d3
   v1left=zero
   v2left=zero
   v3left=zero
   ! right state 
   rhoright=one 
   pright=1.0d-2
   v1right=zero
   v2right=0.99d0
   v3right=zero
else if (iprob == 5)then
   ! left state
   rholeft=1.0d0
   pleft=1.0d3
   v1left=zero
   v2left=0.9d0
   v3left=zero
   ! right state 
   rhoright=one 
   pright=1.0d-2
   v1right=zero
   v2right=zero
   v3right=zero
else if (iprob == 6)then
   ! left state
   rholeft=1.0d0
   pleft=1.0d3
   v1left=zero
   v2left=0.9d0
   v3left=zero
   ! right state 
   rhoright=one 
   pright=1.0d-2
   v1right=zero
   v2right=0.9d0
   v3right=zero
else if (iprob == 7)then
   ! left state
   rholeft=1.0d0
   pleft=1.0d3
   v1left=zero
   v2left=0.9d0
   v3left=zero
   ! right state 
   rhoright=one 
   pright=1.0d-2
   v1right=zero
   v2right=0.99d0
   v3right=zero
else if (iprob == 8)then
   ! left state
   rholeft=1.0d0
   pleft=1.0d3
   v1left=zero
   v2left=0.99d0
   v3left=zero
   ! right state 
   rhoright=one 
   pright=1.0d-2
   v1right=zero
   v2right=zero
   v3right=zero
else if (iprob == 9)then
   ! left state
   rholeft=1.0d0
   pleft=1.0d3
   v1left=zero
   v2left=0.99d0
   v3left=zero
   ! right state 
   rhoright=one 
   pright=1.0d-2
   v1right=zero
   v2right=0.9d0
   v3right=zero
else if (iprob == 10)then
   ! left state
   rholeft=1.0d0
   pleft=1.0d3
   v1left=zero
   v2left=0.99d0
   v3left=zero
   ! right state 
   rhoright=one 
   pright=1.0d-2
   v1right=zero
   v2right=0.99d0
   v3right=zero
else if (iprob == 11)then
   ! left state
   rholeft=1.0d0
   pleft=1.0d-4
   v1left=one-1.0d-10
   v2left=zero
   v3left=zero
else if (iprob == 12)then
   {^IFONED call mpistop("iprob=12 is not implemented for 1D!")} 
   {^NOONED
   startx2 = xprobmin2+0.5d0*(xprobmax2-xprobmin2)
   }
   rhoNE=0.1d0
   v1ne=zero
   v2ne=zero
   v3ne=zero
   pNE=0.01d0
   rhoNW=0.1d0
   v1nw=0.99d0
   v2nw=zero
   v3nw=zero
   pNW=one
   rhoSW=0.5d0
   v1sw=zero
   v2sw=zero
   v3sw=zero
   pSW=one
   rhoSE=0.1d0
   v1se=zero
   v2se=0.99d0
   v3se=zero
   pSE=one
else
    call mpistop("iprob not available!")
endif

! shock location
startx1 = xprobmin1+0.5d0*(xprobmax1-xprobmin1)
if(iprob==11) startx1=xprobmax1

if(iprob<=11)then 
  where(x(ix^S,1)<=startx1)
     w(ix^S,rho_)       = rholeft
     {^C&w(ix^S,v^C_) = v^Cleft \}
     w(ix^S,pp_)     = pleft
  elsewhere
     w(ix^S,rho_)       = rhoright
     {^C&w(ix^S,v^C_) = v^Cright \}
     w(ix^S,pp_)     = pright
  endwhere
endif

{^NOONED
if(iprob==12)then 
  where(x(ix^S,1)<=startx1.and.x(ix^S,2)<=startx2)
     w(ix^S,rho_)       = rhoSW
     {^C&w(ix^S,v^C_) = v^Csw \}
     w(ix^S,pp_)     = pSW
  endwhere
  where(x(ix^S,1)>startx1.and.x(ix^S,2)<=startx2)
     w(ix^S,rho_)       = rhoSE
     {^C&w(ix^S,v^C_) = v^Cse \}
     w(ix^S,pp_)     = pSE
  endwhere
  where(x(ix^S,1)<=startx1.and.x(ix^S,2)>startx2)
     w(ix^S,rho_)       = rhoNW
     {^C&w(ix^S,v^C_) = v^Cnw \}
     w(ix^S,pp_)     = pNW
  endwhere
  where(x(ix^S,1)>startx1.and.x(ix^S,2)>startx2)
     w(ix^S,rho_)       = rhoNE
     {^C&w(ix^S,v^C_) = v^Cne \}
     w(ix^S,pp_)     = pNE
  endwhere
endif
}

w(ix^S,lfac_)=one/dsqrt(one-({^C&w(ix^S,v^C_)**2|+}))
if(useprimitiveRel)then
   {^C&w(ix^S,u^C_)=w(ix^S,lfac_)*w(ix^S,v^C_)\}
endif
patchw(ix^S)=.false.
call conserve(ixG^L,ix^L,w,patchw)

if(first)then
  if(mype==0)then
    if(iprob<=11)then
      write(*,*)'Doing 1D SRHD, Riemann problem'
      write(*,*)'LEFT: rho - p - v1 v2 v3 :',rholeft,pleft,v1left,v2left,v3left
      if(iprob<=10) write(*,*) &
           'RIGHT:rho - p - v1 v2 v3 :',rhoright,pright,v1right,v2right,v3right
    endif
    if(iprob==12)then
      write(*,*)'Doing 2D SRHD, double Riemann problem'
      write(*,*)'NE: rho-p- v1 v2 :',rhoNE,pNE,v1ne,v2ne
      write(*,*)'NW: rho-p- v1 v2 :',rhoNW,pNW,v1nw,v2nw
      write(*,*)'SE: rho-p- v1 v2 :',rhoSE,pSE,v1se,v2se
      write(*,*)'SW: rho-p- v1 v2 :',rhoSW,pSW,v1sw,v2sw
    endif
  endif
  first=.false.
endif

end subroutine initonegrid_usr
!=============================================================================
subroutine specialsource(qdt,ixI^L,ixO^L,iw^LIM,qtC,wCT,qt,w,x)

! Calculate w(iw)=w(iw)+qdt*SOURCE[wCT,qtC,x] within ixO for all indices
! iw=iwmin...iwmax.  wCT is at time qCT

include 'amrvacdef.f'

integer, intent(in) :: ixI^L, ixO^L, iw^LIM
double precision, intent(in) :: qdt, qtC, qt, x(ixI^S,1:ndim)
double precision, intent(inout) :: wCT(ixI^S,1:nw), w(ixI^S,1:nw)
!-----------------------------------------------------------------------------

end subroutine specialsource
!=============================================================================
subroutine getdt_special(w,ixG^L,ix^L,dtnew,dx^D,x)

! Limit "dt" further if necessary, e.g. due to the special source terms.
! The getdt_courant (CFL condition) and the getdt subroutine in the AMRVACPHYS
! module have already been called.

include 'amrvacdef.f'

integer, intent(in) :: ixG^L, ix^L
double precision, intent(in) :: dx^D, x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw), dtnew
!-----------------------------------------------------------------------------

dtnew=bigdouble

end subroutine getdt_special
!=============================================================================
subroutine specialeta(w,ixI^L,ix^L,idirmin,x,current,eta)

! Set the "eta" array for resistive MHD based on w or the
! "current" variable which has components between idirmin and 3.

include 'amrvacdef.f'

integer, intent(in) :: ixI^L, ix^L, idirmin
double precision, intent(in) :: w(ixI^S,nw), x(ixI^S,1:ndim)

double precision :: current(ixG^T,7-2*ndir:3), eta(ixG^T)
!-----------------------------------------------------------------------------

call mpistop("specialeta is not defined")

end subroutine specialeta
!=============================================================================
subroutine specialrefine_grid(igrid,level,ixG^L,ix^L,qt,w,x,refine,coarsen)

! Enforce additional refinement or coarsening
! One can use the coordinate info in x and/or time qt=t_n and w(t_n) values w.

! you must set consistent values for integers refine/coarsen:

! refine = -1 enforce to not refine
! refine =  0 doesn't enforce anything
! refine =  1 enforce refinement

! coarsen = -1 enforce to not coarsen
! coarsen =  0 doesn't enforce anything
! coarsen =  1 enforce coarsen

include 'amrvacdef.f'

integer, intent(in) :: igrid, level, ixG^L, ix^L
double precision, intent(in) :: qt, w(ixG^S,1:nw), x(ixG^S,1:ndim)
integer, intent(inout) :: refine, coarsen
double precision:: lorin,vshock
!-----------------------------------------------------------------------------

if(iprob==11) then
  ! derefine after shock has passed

  lorin=one/dsqrt(one-(one-1.0d-10)**2)
  vshock=(eqpar(gamma_)-one)*lorin*(one-1.0d-10)/(lorin+one)

  if (all(x(ix^S,1) > xprobmax1-vshock*qt+0.1d0)) then
    refine=-1
    coarsen=1
  endif

endif

end subroutine specialrefine_grid
!=============================================================================
subroutine specialvarforerrest(ixI^L,ixO^L,iflag,w,var)

! this is the place to compute a local auxiliary variable to be used
! as refinement criterion for the Lohner error estimator only
!  -->it is then requiring and iflag>nw
! note that ixO=ixI=ixG, hence the term local (gradients need special attention!)

include 'amrvacdef.f'

integer, intent(in)          :: ixI^L,ixO^L,iflag
double precision, intent(in) :: w(ixI^S,1:nw)
double precision, intent(out):: var(ixG^T)
!-----------------------------------------------------------------------------

if (iflag >nw)call mpistop(' iflag> nw, make change in parfile or in user file')

var(ixI^S) = zero 

end subroutine specialvarforerrest
!=============================================================================
! amrvacusr.t.testsrhd
!=============================================================================
