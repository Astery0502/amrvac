!=============================================================================
! amrvacusr.t.bowhd22

! INCLUDE:amrvacnul/specialini.t
INCLUDE:amrvacnul/speciallog.t
! INCLUDE:amrvacnul/specialbound.t
INCLUDE:amrvacnul/specialsource.t
!=============================================================================
subroutine initglobaldata_usr

include 'amrvacdef.f'
!-----------------------------------------------------------------------------

eqpar(gamma_)=5.0d0/3.0d0
eqpar(vel_)=10.0d0

end subroutine initglobaldata_usr
!=============================================================================
subroutine initonegrid_usr(ixG^L,ix^L,w,x)

! initialize one grid 

include 'amrvacdef.f'

integer, intent(in) :: ixG^L, ix^L
double precision, intent(in) :: x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw)

double precision :: delr
logical :: patchw(ixG^T)
!----------------------------------------------------------------------------

{^IFONED call mpistop("This is a 2D HD problem")}
{^IFTHREED call mpistop("This is a 2D HD problem")}
{^IFTWOD
w(ix^S,rho_)=1.0d0
delr=0.2d0
where(x(ix^S,1)<one+delr)
   w(ix^S,v1_)=-eqpar(vel_)*dcos(x(ix^S,2)) &
               *dsin(dpi*(x(ix^S,1)-one)/(two*delr))
   w(ix^S,v2_)=eqpar(vel_)*dsin(x(ix^S,2)) &
               *dsin(dpi*(x(ix^S,1)-one)/(two*delr))
elsewhere
   w(ix^S,v1_)=-eqpar(vel_)*dcos(x(ix^S,2))
   w(ix^S,v2_)=eqpar(vel_)*dsin(x(ix^S,2))
endwhere
w(ix^S,p_)=one/eqpar(gamma_)
patchw(ix^S)=.false.
call conserve(ixG^L,ix^L,w,patchw)
}

end subroutine initonegrid_usr
!=============================================================================
subroutine specialbound_usr(qt,ixG^L,ixO^L,iw,iB,w,x)

! special boundary types, user defined

include 'amrvacdef.f'

integer, intent(in) :: ixG^L, ixO^L, iw, iB
double precision, intent(in) :: qt, x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw)

double precision :: tmpvx(ixG^S),tmpvy(ixG^S),tmpp(ixG^S)
logical :: patchw(ixG^T)
integer :: ix1,ix2
!----------------------------------------------------------------------------

select case(iB)
case(1)
   select case(iw)
   case(rho_)
    do ix1=ixOmin1,ixOmax1
     w(ix1,ixOmin2:ixOmax2,rho_)=w(ixOmax1+dixB-ix1+1,ixOmin2:ixOmax2,rho_)
     w(ix1,ixOmin2:ixOmax2,v1_)=-w(ixOmax1+dixB-ix1+1,ixOmin2:ixOmax2,m1_) &
                                /w(ixOmax1+dixB-ix1+1,ixOmin2:ixOmax2,rho_)
     w(ix1,ixOmin2:ixOmax2,v2_)=w(ixOmax1+dixB-ix1+1,ixOmin2:ixOmax2,m2_) &
                                /w(ixOmax1+dixB-ix1+1,ixOmin2:ixOmax2,rho_)
     tmpp(ix1,ixOmin2:ixOmax2)= (eqpar(gamma_)-one)*(w(ixOmax1+dixB-ix1+1,ixOmin2:ixOmax2,e_) &
                            -half*(w(ixOmax1+dixB-ix1+1,ixOmin2:ixOmax2,m1_)**2 &
                                  +w(ixOmax1+dixB-ix1+1,ixOmin2:ixOmax2,m2_)**2) &
                                  /w(ixOmax1+dixB-ix1+1,ixOmin2:ixOmax2,rho_))
     w(ix1,ixOmin2:ixOmax2,p_)=tmpp(ix1,ixOmin2:ixOmax2)
    enddo
    patchw(ixO^S)=.false.
    call conserve(ixG^L,ixO^L,w,patchw)
   case(m1_)
      !dummy
   case(m2_)
      !dummy
   case(e_)
      !dummy
   case default
      call mpistop("Special boundary is not defined for this variable")
   end select
case(2)
   select case(iw)
   case(rho_)
     w(ixO^S,rho_)=1.0d0
     w(ixO^S,v1_)=-eqpar(vel_)*dcos(x(ixO^S,2))
     w(ixO^S,v2_)=eqpar(vel_)*dsin(x(ixO^S,2))
     w(ixO^S,p_)=one/eqpar(gamma_)
     patchw(ixO^S)=.false.
     call conserve(ixG^L,ixO^L,w,patchw)
   case(m1_)
      !dummy
   case(m2_)
      !dummy
   case(e_)
      !dummy
   case default
      call mpistop("Special boundary is not defined for this variable")
   end select
case(3)
   select case(iw)
   case(rho_)
    do ix2=ixOmin2,ixOmax2
     w(ixOmin1:ixOmax1,ix2,rho_)=w(ixOmin1:ixOmax1,ixOmax2+1,rho_)
     tmpvx(ixOmin1:ixOmax1,ix2)= dcos(x(ixOmin1:ixOmax1,ixOmax2+1,2))&
            *w(ixOmin1:ixOmax1,ixOmax2+1,m1_)/w(ixOmin1:ixOmax1,ixOmax2+1,rho_) &
                                -dsin(x(ixOmin1:ixOmax1,ixOmax2+1,2))&
            *w(ixOmin1:ixOmax1,ixOmax2+1,m2_)/w(ixOmin1:ixOmax1,ixOmax2+1,rho_) 
     tmpvy(ixOmin1:ixOmax1,ix2)= dsin(x(ixOmin1:ixOmax1,ixOmax2+1,2))&
            *w(ixOmin1:ixOmax1,ixOmax2+1,m1_)/w(ixOmin1:ixOmax1,ixOmax2+1,rho_) &
                                +dcos(x(ixOmin1:ixOmax1,ixOmax2+1,2))&
            *w(ixOmin1:ixOmax1,ixOmax2+1,m2_)/w(ixOmin1:ixOmax1,ixOmax2+1,rho_) 
     w(ixOmin1:ixOmax1,ix2,v1_)=dcos(x(ixOmin1:ixOmax1,ix2,2))*tmpvx(ixOmin1:ixOmax1,ix2) &
                               +dsin(x(ixOmin1:ixOmax1,ix2,2))*tmpvy(ixOmin1:ixOmax1,ix2) 
     w(ixOmin1:ixOmax1,ix2,v2_)=-dsin(x(ixOmin1:ixOmax1,ix2,2))*tmpvx(ixOmin1:ixOmax1,ix2) &
                               +dcos(x(ixOmin1:ixOmax1,ix2,2))*tmpvy(ixOmin1:ixOmax1,ix2) 
     tmpp(ixOmin1:ixOmax1,ix2)= (eqpar(gamma_)-one)*(w(ixOmin1:ixOmax1,ixOmax2+1,e_) &
                            -half*(w(ixOmin1:ixOmax1,ixOmax2+1,m1_)**2 &
                                  +w(ixOmin1:ixOmax1,ixOmax2+1,m2_)**2) &
                                  /w(ixOmin1:ixOmax1,ixOmax2+1,rho_))
     w(ixOmin1:ixOmax1,ix2,p_)=tmpp(ixOmin1:ixOmax1,ix2)
    enddo
    patchw(ixO^S)=.false.
    call conserve(ixG^L,ixO^L,w,patchw)
   case(m1_)
      !dummy
   case(m2_)
      !dummy
   case(e_)
      !dummy
   case default
      call mpistop("Special boundary is not defined for this variable")
   end select
case(4)
   select case(iw)
   case(rho_)
    do ix2=ixOmin2,ixOmax2
     w(ixOmin1:ixOmax1,ix2,rho_)=w(ixOmin1:ixOmax1,ixOmin2-1,rho_)
     tmpvx(ixOmin1:ixOmax1,ix2)= dcos(x(ixOmin1:ixOmax1,ixOmin2-1,2))&
            *w(ixOmin1:ixOmax1,ixOmin2-1,m1_)/w(ixOmin1:ixOmax1,ixOmin2-1,rho_) &
                                -dsin(x(ixOmin1:ixOmax1,ixOmin2-1,2))&
            *w(ixOmin1:ixOmax1,ixOmin2-1,m2_)/w(ixOmin1:ixOmax1,ixOmin2-1,rho_) 
     tmpvy(ixOmin1:ixOmax1,ix2)= dsin(x(ixOmin1:ixOmax1,ixOmin2-1,2))&
            *w(ixOmin1:ixOmax1,ixOmin2-1,m1_)/w(ixOmin1:ixOmax1,ixOmin2-1,rho_) &
                                +dcos(x(ixOmin1:ixOmax1,ixOmin2-1,2))&
            *w(ixOmin1:ixOmax1,ixOmin2-1,m2_)/w(ixOmin1:ixOmax1,ixOmin2-1,rho_) 
     w(ixOmin1:ixOmax1,ix2,v1_)=dcos(x(ixOmin1:ixOmax1,ix2,2))*tmpvx(ixOmin1:ixOmax1,ix2) &
                               +dsin(x(ixOmin1:ixOmax1,ix2,2))*tmpvy(ixOmin1:ixOmax1,ix2) 
     w(ixOmin1:ixOmax1,ix2,v2_)=-dsin(x(ixOmin1:ixOmax1,ix2,2))*tmpvx(ixOmin1:ixOmax1,ix2) &
                               +dcos(x(ixOmin1:ixOmax1,ix2,2))*tmpvy(ixOmin1:ixOmax1,ix2) 
     tmpp(ixOmin1:ixOmax1,ix2)= (eqpar(gamma_)-one)*(w(ixOmin1:ixOmax1,ixOmin2-1,e_) &
                            -half*(w(ixOmin1:ixOmax1,ixOmin2-1,m1_)**2 &
                                  +w(ixOmin1:ixOmax1,ixOmin2-1,m2_)**2) &
                                  /w(ixOmin1:ixOmax1,ixOmin2-1,rho_))
     w(ixOmin1:ixOmax1,ix2,p_)=tmpp(ixOmin1:ixOmax1,ix2)
    enddo
    patchw(ixO^S)=.false.
    call conserve(ixG^L,ixO^L,w,patchw)
   case(m1_)
      !dummy
   case(m2_)
      !dummy
   case(e_)
      !dummy
   case default
      call mpistop("Special boundary is not defined for this variable")
   end select
case default
   call mpistop("Special boundary is not defined for this region")
end select

end subroutine specialbound_usr
!=============================================================================
subroutine bc_int(qt,ixG^L,ixO^L,w,x)

! internal boundary, user defined
!
! This subroutine can be used to artificially overwrite ALL conservative 
! variables in a user-selected region of the mesh, and thereby act as
! an internal boundary region. It is called just before external (ghost cell)
! boundary regions will be set by the BC selection. Here, you could e.g. 
! want to introduce an extra variable (nwextra, to be distinguished from nwaux)
! which can be used to identify the internal boundary region location.
! Its effect should always be local as it acts on the mesh.
!

include 'amrvacdef.f'

integer, intent(in) :: ixG^L,ixO^L
double precision, intent(in) :: qt
double precision, intent(inout) :: w(ixG^S,1:nw)
double precision, intent(in) :: x(ixG^S,1:ndim)

! .. local ..
!logical :: patchw(ixG^T)
!----------------------------------------------------------------------------

call mpistop("bc_int not defined")

! just to give an example for relativistic MHD
!  -----------------------------------------
!patchw(ixO^S)=.true.
!where (({^D&x(ixO^S,^D)**2+})<half**2.0d0) 
!    patchw(ixO^S) = .false.
!  ^C&w(ixO^S,v^C_)=zero;
!  ^C&w(ixO^S,b^C_)=zero;
!    w(ixO^S,b3_) = one
!    w(ixO^S,v1_) = 0.99
!    w(ixO^S,rho_) = 1.d0
!    w(ixO^S,pp_)  = 2.0d0
!    w(ixO^S,lfac_)=one/dsqrt(one-({^C&w(ixO^S,v^C_)**2.0d0+}))
!end where
!!if (useprimitiveRel) then
!!  where (({^D&x(ixO^S,^D)**2+})<half**2.0d0) 
!!  {^C&w(ixO^S,u^C_)=w(ixO^S,lfac_)*w(ixO^S,v^C_);\}
!!  end where
!!endif
!call conserve(ixG^L,ixO^L,w,patchw)

end subroutine bc_int
!=============================================================================
! amrvacusr.t.bowhd22
!=============================================================================
