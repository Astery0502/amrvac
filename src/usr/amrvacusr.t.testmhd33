!=============================================================================
! amrvacusr.t.testmhd33

! INCLUDE:amrvacnul/specialini.t
INCLUDE:amrvacnul/speciallog.t
INCLUDE:amrvacnul/specialbound.t
!INCLUDE:amrvacnul/specialsource.t
!=============================================================================
subroutine initglobaldata_usr

include 'amrvacdef.f'
!-----------------------------------------------------------------------------
eqpar(gamma_)=5.0d0/3.0d0
eqpar(eta_)=zero

end subroutine initglobaldata_usr
!=============================================================================
subroutine initonegrid_usr(ixG^L,ix^L,w,x)

! initialize one grid 

include 'amrvacdef.f'

integer, intent(in) :: ixG^L,ix^L
double precision, intent(in) :: x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw)

logical::          first

double precision:: qv,width,dv,k1,sigma,p0,cs

double precision:: rho0,rho1,pr0,pr1,beta0,bb0,radp1,radr1,xcr1
double precision:: mpol,Rjet,B0,machs,macha,ff

double precision, dimension(ixG^T) :: r,phi 

integer,dimension(:),allocatable:: seed
integer::  ix2,ix3,seed_size
real::             ranx1d(ixGlo1:ixGhi1)
double precision:: ranx(ixG^T)

logical, dimension(ixG^T)           :: patchw(ixG^T)

data first/.true./
!----------------------------------------------------------------------------
oktest = index(teststr,'initonegrid_usr')>=1
if (oktest) write(unitterm,*) ' === initonegrid_usr  (in ) : ', &
                'ixG^L : ',ixG^L

if (typephys/='mhd') then
   call mpistop("test problems are all 3D MHD problems: set typephys!")
end if

select case(iprob)
 case(0)
   !setamrvac -d=33 -z=0 -phi=0 -g=16,16,16 -p=mhd -u=testmhd33
   ! 3D implosion problem
   rho0=one
   rho1=10.0d0
   pr0=one/eqpar(gamma_)
   pr1=pr0/10.d0
   beta0=2.0
   bb0=dsqrt(two*pr0/beta0)
   radp1=0.2d0
   radr1=0.04d0
   xcr1=-0.1d0

   if(first.and.mype==0)then
     print *,'3D Implosion problem in MHD'
     print *,'  --assuming x-y-z ranging from -0.5,0.5!'
     print *,'  --pressure ratio=',pr0/pr1
     print *,'  --density ratio=',rho0/rho1
     print *,'  --plasma beta=',beta0
     print *,'  --internal plasma beta=',two*pr1/bb0**2
     first=.false.
  endif

  w(ixG^S,m1_)=zero
  w(ixG^S,m2_)=zero
  w(ixG^S,m3_)=zero
  w(ixG^S,b1_)=zero
  w(ixG^S,b2_)=bb0
  w(ixG^S,b3_)=zero

  ! pressure
  where((x(ixG^S,1)**2+x(ixG^S,2)**2+x(ixG^S,3)**2)>radp1**2)
   w(ixG^S,e_)=pr0
  elsewhere
   w(ixG^S,e_)=pr1
  endwhere
  !density
  where(((x(ixG^S,1)-xcr1)**2+x(ixG^S,2)**2+x(ixG^S,3)**2)>radr1**2)
   w(ixG^S,rho_)=rho0
  elsewhere
   w(ixG^S,rho_)=rho1
  endwhere

  ! total energy
  w(ixG^S,e_)=w(ixG^S,e_)/(eqpar(gamma_)-one)+half*(^C&w(ixG^S,b^C_)**2+)
 case(1)
   !setamrvac -d=33 -z=0 -phi=0 -g=16,16,16 -p=mhd -u=testmhd33
   ! KH in 3D, Keppens & Toth
   r(ixG^S)=dsqrt(x(ixG^S,2)**2+x(ixG^S,3)**2)
   phi(ixG^S)=datan2(x(ixG^S,3),x(ixG^S,2))
   
   mpol=one
   k1=two*dpi/(xprobmax1-xprobmin1)
   Rjet=0.5d0
   width=0.1d0*Rjet
   qv=0.645d0
   B0=0.129d0
   dv=0.01d0

   w(ixG^S,rho_)=one
   w(ixG^S,p_)=one
   w(ixG^S,b1_)=B0
   w(ixG^S,b2_)=zero
   w(ixG^S,b3_)=zero
   w(ixG^S,v1_)=qv*dtanh((r(ixG^S)-Rjet)/width)
   w(ixG^S,v2_)=dv*dexp(-((r(ixG^S)-Rjet)/(4.0d0*width))**2) &
                 *dcos(mpol*phi(ixG^S))*dsin(k1*x(ixG^S,1))*dcos(phi(ixG^S))
   w(ixG^S,v3_)=dv*dexp(-((r(ixG^S)-Rjet)/(4.0d0*width))**2) &
                 *dcos(mpol*phi(ixG^S))*dsin(k1*x(ixG^S,1))*dsin(phi(ixG^S))

   patchw(ixG^S)=.false.
   call conserve(ixG^L,ix^L,w,patchw)
 case(2)
   !setamrvac -d=33 -z=0 -phi=0 -g=16,16,16 -p=mhd -u=testmhd33
   ! 3D Orszag Tang
   rho0=25.0d0/9.0d0
   p0=5.0d0/3.0d0
   w(ixG^S,rho_)=rho0
   if(first .and. mype==0)then
      write(*,*)'Doing 3D ideal MHD, Orszag Tang problem'
      write(*,*)'rho - p - gamma:',rho0,p0,eqpar(gamma_)
      first=.false.
   endif
   w(ixG^S,m1_)=-rho0*dsin(x(ixG^S,2))*dcos(x(ixG^S,3))
   w(ixG^S,m2_)= rho0*dsin(x(ixG^S,1))*dcos(x(ixG^S,3))
   w(ixG^S,m3_)= zero
   w(ixG^S,b1_)=-dsin(x(ixG^S,2))*dcos(x(ixG^S,3))
   w(ixG^S,b2_)= dsin(two*x(ixG^S,1))*dcos(x(ixG^S,3))
   w(ixG^S,b3_)= zero
   w(ixG^S,e_)=p0/(eqpar(gamma_)-one)+&
     half*((^C&w(ixG^S,m^C_)**2+)/rho0+(^C&w(ixG^S,b^C_)**2+))
 case(3)
   !setamrvac -d=33 -z=0 -phi=0 -g=16,16,16 -p=mhd -u=testmhd33
   ! 3D variant for Baty and Keppens, A&A 447, 9, 2006, case Fig 13
   w(ixG^S,rho_)=one
   w(ixG^S,e_)=one
   cs=dsqrt(eqpar(gamma_))
   machs=3.0d0
   macha=7.0d0
   qv=cs*machs
   w(ixG^S,b1_)=qv/macha
   w(ixG^S,b2_)=zero
   w(ixG^S,b3_)=zero
   ff=1.25d0
   Rjet=0.125d0
   dv=0.01d0
   sigma=0.2d0
   if(first)then
      write(*,*)'seeding random number generator, on mype==',mype
      call random_seed(SIZE=seed_size)
      allocate(seed(seed_size))
      call random_seed(GET=seed(1:seed_size))
   endif
   do ix2=ixGmin2,ixGmax2
     do ix3=ixGmin3,ixGmax3
      call random_number(ranx1d(ixGmin1:ixGmax1))
      ranx(ixGmin1:ixGmax1,ix2,ix3)=ranx1d(ixGmin1:ixGmax1)-0.5d0
     enddo
   enddo
   if(first .and. mype==0)then
      write(*,*)'Doing 3D ideal MHD, Double Kelvin-Helmholtz problem'
      write(*,*)'cs, B0, Ma, Ms, V, Rj, F, dv, sigma:'
      write(*,*) cs,qv/macha,macha,machs,qv,Rjet,ff,dv,sigma
   endif
   if(first)then
      first=.false.
   endif
   w(ixG^S,m1_)=half*qv*(one-dtanh(ff*dabs(x(ixG^S,2))/Rjet-ff*Rjet/dabs(x(ixG^S,2))))
   w(ixG^S,m2_)=dv*ranx(ixG^S)*dexp(-((dabs(x(ixG^S,2))-Rjet)/sigma)**2)
   w(ixG^S,m3_)=dv*ranx(ixG^S)*dexp(-((dabs(x(ixG^S,2))-Rjet)/sigma)**2)
   w(ixG^S,e_)=w(ixG^S,e_)/(eqpar(gamma_)-one)+&
     half*(w(ixG^S,rho_)*(^C&w(ixG^S,m^C_)**2+)+(^C&w(ixG^S,b^C_)**2+))
case default
            write(unitterm,*)'Undefined Iprob in Userfile ',iprob
   Call mpistop(' --- initonegrid_usr ---')
end  select 

end subroutine initonegrid_usr
!=============================================================================
subroutine specialsource(qdt,ixI^L,ixO^L,iw^LIM,qtC,wCT,qt,w,x)

! Calculate w(iw)=w(iw)+qdt*SOURCE[wCT,qtC,x] within ixO for all indices
! iw=iwmin...iwmax.  wCT is at time qCT

include 'amrvacdef.f'

integer, intent(in) :: ixI^L, ixO^L, iw^LIM
double precision, intent(in) :: qdt, qtC, qt, x(ixI^S,1:ndim)
double precision, intent(inout) :: wCT(ixI^S,1:nw), w(ixI^S,1:nw)

! integer :: iw
! double precision :: s(ixG^T)
!-----------------------------------------------------------------------------

! do iw= iw^LIM
!    select case(iw)
!    case(m1_)
!       ! The source is based on the time centered wCT
!       call getmyforce(wCT,ixO^L,s)
!       w(ixO^S,m1_)=w(ixO^S,m1_) + qdt*s(ixO^S)
!    case(e_)
!       call getmyheating(wCT,ixO^L,s)
!       w(ixO^S,e_) =w(ixO^S,e_)  + qdt*s(ixO^S)
!    end select
! end do

end subroutine specialsource
!=============================================================================
subroutine getdt_special(w,ixG^L,ix^L,dtnew,dx^D,x)

! Limit "dt" further if necessary, e.g. due to the special source terms.
! The getdt_courant (CFL condition) and the getdt subroutine in the AMRVACPHYS
! module have already been called.

include 'amrvacdef.f'

integer, intent(in) :: ixG^L, ix^L
double precision, intent(in) :: dx^D, x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw), dtnew
!-----------------------------------------------------------------------------

dtnew=bigdouble

end subroutine getdt_special
!=============================================================================
subroutine specialeta(w,ixI^L,ix^L,idirmin,x,current,eta)

! Set the "eta" array for resistive MHD based on w or the
! "current" variable which has components between idirmin and 3.

include 'amrvacdef.f'

integer, intent(in) :: ixI^L, ix^L, idirmin
double precision, intent(in) :: w(ixI^S,nw), x(ixI^S,1:ndim)

double precision :: current(ixG^T,7-2*ndir:3), eta(ixG^T)
!-----------------------------------------------------------------------------

!  eta(ix^S)=...

call mpistop("specialeta is not defined")

end subroutine specialeta
!=============================================================================
subroutine specialrefine_grid(igrid,level,ixG^L,ix^L,qt,w,x,refine,coarsen)

! Enforce additional refinement or coarsening
! One can use the coordinate info in x and/or time qt=t_n and w(t_n) values w.

include 'amrvacdef.f'

integer, intent(in) :: igrid, level, ixG^L, ix^L
double precision, intent(in) :: qt, w(ixG^S,1:nw), x(ixG^S,1:ndim)
integer, intent(inout) :: refine, coarsen
!-----------------------------------------------------------------------------


end subroutine specialrefine_grid
!=============================================================================
subroutine specialvarforerrest(ixI^L,ixO^L,iflag,w,var)

! this is the place to compute a local auxiliary variable to be used
! as refinement criterion for the Lohner error estimator only
!  -->it is then requiring and iflag>nw
! note that ixO=ixI=ixG, hence the term local (gradients need special attention!)

include 'amrvacdef.f'

integer, intent(in)          :: ixI^L,ixO^L,iflag
double precision, intent(in) :: w(ixI^S,1:nw)
double precision, intent(out):: var(ixG^T)
!-----------------------------------------------------------------------------

if (iflag >nw)call mpistop(' iflag> nw, make change in parfile or in user file')

var(ixI^S) = zero

end subroutine specialvarforerrest
!=============================================================================
subroutine specialset_B0(ixI^L,ixO^L,x,wB0)

! Here one can add a steady (time-independent) potential background field

include 'amrvacdef.f'

integer, intent(in)           :: ixI^L,ixO^L
double precision, intent(in)  :: x(ixI^S,1:ndim)
double precision, intent(inout) :: wB0(ixI^S,1:ndir)
!-----------------------------------------------------------------------------
call mpistop(' abs(Busr)> 0, make change in parfile or in user file')

wB0(ixO^S,1:ndir)=wB0(ixO^S,1:ndir)
!!wB0(ixO^S,1:ndir)=wB0(ixO^S,1:ndir)+user defined steady potential field

end subroutine specialset_B0

!=============================================================================
subroutine specialsource_impl(qdt,ixI^L,ixO^L,iw^LIM,qtC,wCT,qt,w,x)

include 'amrvacdef.f'

integer, intent(in) :: ixI^L, ixO^L, iw^LIM
double precision, intent(in) :: qdt, qtC, qt, x(ixI^S,1:ndim)
double precision, intent(inout) :: w(ixI^S,1:nw), wCT(ixI^S,1:nw)
!-----------------------------------------------------------------------------

end subroutine specialsource_impl
!=============================================================================
subroutine getdt_impl(w,ixG^L,ix^L,dtnew,dx^D,x)

include 'amrvacdef.f'

integer, intent(in) :: ixG^L,ix^L
double precision, intent(in) :: dx^D, x(ixG^S,1:ndim)
! note that depending on strictsmall etc, w values may change
double precision, intent(inout) :: w(ixG^S,1:nw), dtnew
!-----------------------------------------------------------------------------
dtnew=bigdouble

end subroutine getdt_impl
!=============================================================================
! amrvacusr.t.testmhd33
!=============================================================================
