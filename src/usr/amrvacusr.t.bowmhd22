!=============================================================================
! amrvacusr.t.bowmhd22

! INCLUDE:amrvacnul/specialini.t
INCLUDE:amrvacnul/speciallog.t
! INCLUDE:amrvacnul/specialbound.t
INCLUDE:amrvacnul/specialsource.t
!=============================================================================
subroutine initglobaldata_usr

include 'amrvacdef.f'
!-----------------------------------------------------------------------------

eqpar(gamma_)=5.0d0/3.0d0
eqpar(eta_)=zero
select case(iprob)
 case(1)
 eqpar(beta_)=0.4d0
 eqpar(machA_)=1.5d0
 case(2)
 eqpar(beta_)=zero
 eqpar(machA_)=10.0d0
 case default
  call mpistop("only iprob 1 or 2 implemented")
end select

end subroutine initglobaldata_usr
!=============================================================================
subroutine initonegrid_usr(ixG^L,ix^L,w,x)

! initialize one grid 

include 'amrvacdef.f'

integer, intent(in) :: ixG^L,ix^L
double precision, intent(in) :: x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw)
double precision:: Bmag

logical :: patchw(ixG^T)
!----------------------------------------------------------------------------
oktest = index(teststr,'initonegrid_usr')>=1
if (oktest) write(unitterm,*) ' === initonegrid_usr  (in ) : ', &
                'ixG^L : ',ixG^L

{^IFONED call mpistop("This is a 2D MHD problem")}
{^IFTHREED call mpistop("This is a 2D MHD problem")}
{^IFTWOD
w(ix^S,rho_)=1.0d0
if(eqpar(beta_)>zero)then
    Bmag=one
    w(ix^S,v1_)=-eqpar(machA_)*Bmag*dcos(x(ix^S,2))
    w(ix^S,v2_)=eqpar(machA_)*Bmag*dsin(x(ix^S,2))
    w(ix^S,p_)=eqpar(beta_)/two
else
    Bmag=zero
    w(ix^S,v1_)=-eqpar(machA_)*dcos(x(ix^S,2))
    w(ix^S,v2_)=eqpar(machA_)*dsin(x(ix^S,2))
    w(ix^S,p_)=one/eqpar(gamma_)
endif
w(ix^S,b1_)=-Bmag*dcos(x(ix^S,2))
w(ix^S,b2_)=Bmag*dsin(x(ix^S,2))
patchw(ix^S)=.false.
call conserve(ixG^L,ix^L,w,patchw)
}

end subroutine initonegrid_usr
!=============================================================================
subroutine specialbound_usr(qt,ixG^L,ixO^L,iw,iB,w,x)

! special boundary types, user defined

include 'amrvacdef.f'

integer, intent(in) :: ixO^L, iw, iB, ixG^L
double precision, intent(in) :: qt, x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw)

integer :: ix2
double precision :: tmpvx(ixG^T),tmpvy(ixG^T),tmpp(ixG^T),tmpvphi(ixG^T)

logical :: patchw(ixG^T)
double precision:: Bmag
!----------------------------------------------------------------------------
oktest = index(teststr,'specialbound')>=1
if (oktest) write(unitterm,*) ' === specialbound  (in ) : ', &
                'ixO^L : ',ixO^L,iw,iB

select case(iB)
case(2)
   select case(iw)
   case(rho_)
     w(ixO^S,rho_)=1.0d0
     if(eqpar(beta_)>zero)then
        !!Bmag=dsqrt(two/eqpar(gamma_)/eqpar(beta_))
        Bmag=one
        w(ixO^S,v1_)=-eqpar(machA_)*Bmag*dcos(x(ixO^S,2))
        w(ixO^S,v2_)=eqpar(machA_)*Bmag*dsin(x(ixO^S,2))
        w(ixO^S,p_)=eqpar(beta_)/two
     else
        Bmag=zero
        w(ixO^S,v1_)=-eqpar(machA_)*dcos(x(ixO^S,2))
        w(ixO^S,v2_)=eqpar(machA_)*dsin(x(ixO^S,2))
        w(ixO^S,p_)=one/eqpar(gamma_)
     endif
     w(ixO^S,b1_)=-Bmag*dcos(x(ixO^S,2))
     w(ixO^S,b2_)=Bmag*dsin(x(ixO^S,2))
     patchw(ixO^S)=.false.
     call conserve(ixG^L,ixO^L,w,patchw)
   case(m1_)
      !dummy
   case(m2_)
      !dummy
   case(e_)
      !dummy
   case(b1_)
      !dummy
   case(b2_)
      !dummy
   case default
      call mpistop("Special boundary is not defined for this variable")
   end select
case(4)
   select case(iw)
   case(rho_)
    do ix2=ixOmin2,ixOmax2
     ! extrapolate density continuously
     w(ixOmin1:ixOmax1,ix2,rho_)=w(ixOmin1:ixOmax1,ixOmin2-1,rho_)
     !tmpvx(ixOmin1:ixOmax1,ix2)= dcos(x(ixOmin1:ixOmax1,ixOmin2-1,2))&
     !       *w(ixOmin1:ixOmax1,ixOmin2-1,m1_)/w(ixOmin1:ixOmax1,ixOmin2-1,rho_) &
     !                           -dsin(x(ixOmin1:ixOmax1,ixOmin2-1,2))&
     !       *w(ixOmin1:ixOmax1,ixOmin2-1,m2_)/w(ixOmin1:ixOmax1,ixOmin2-1,rho_) 
     !tmpvy(ixOmin1:ixOmax1,ix2)= dsin(x(ixOmin1:ixOmax1,ixOmin2-1,2))&
     !       *w(ixOmin1:ixOmax1,ixOmin2-1,m1_)/w(ixOmin1:ixOmax1,ixOmin2-1,rho_) &
     !                           +dcos(x(ixOmin1:ixOmax1,ixOmin2-1,2))&
     !       *w(ixOmin1:ixOmax1,ixOmin2-1,m2_)/w(ixOmin1:ixOmax1,ixOmin2-1,rho_) 
     !w(ixOmin1:ixOmax1,ix2,v1_)= dcos(x(ixOmin1:ixOmax1,ix2,2))*tmpvx(ixOmin1:ixOmax1,ix2) &
     !                           +dsin(x(ixOmin1:ixOmax1,ix2,2))*tmpvy(ixOmin1:ixOmax1,ix2) 
     !w(ixOmin1:ixOmax1,ix2,v2_)=-dsin(x(ixOmin1:ixOmax1,ix2,2))*tmpvx(ixOmin1:ixOmax1,ix2) &
     !                           +dcos(x(ixOmin1:ixOmax1,ix2,2))*tmpvy(ixOmin1:ixOmax1,ix2) 
     ! take azimuthal velocity from final mesh point
     tmpvphi(ixOmin1:ixOmax1,ix2)= w(ixOmin1:ixOmax1,ixOmin2-1,m2_)/w(ixOmin1:ixOmax1,ixOmin2-1,rho_)
     w(ixOmin1:ixOmax1,ix2,v2_)=tmpvphi(ixOmin1:ixOmax1,ix2)
     ! compute pressure in final mesh point
     tmpp(ixOmin1:ixOmax1,ix2)= (eqpar(gamma_)-one)&
                                 *(w(ixOmin1:ixOmax1,ixOmin2-1,e_) &
                            -half*(w(ixOmin1:ixOmax1,ixOmin2-1,m1_)**2  &
                                  +w(ixOmin1:ixOmax1,ixOmin2-1,m2_)**2) &
                                  /w(ixOmin1:ixOmax1,ixOmin2-1,rho_)    &
                            -half*(w(ixOmin1:ixOmax1,ixOmin2-1,b1_)**2  &
                                  +w(ixOmin1:ixOmax1,ixOmin2-1,b2_)**2))
     ! extrapolate pressure from final mesh point
     w(ixOmin1:ixOmax1,ix2,p_)=tmpp(ixOmin1:ixOmax1,ix2)
     ! take B vector from final mesh point
     w(ixOmin1:ixOmax1,ix2,b1_)=w(ixOmin1:ixOmax1,ixOmin2-1,b1_)
     w(ixOmin1:ixOmax1,ix2,b2_)=w(ixOmin1:ixOmax1,ixOmin2-1,b2_)
     !w(ixOmin1:ixOmax1,ix2,b1_)=w(ixOmin1:ixOmax1,ix2,b2_) &
     !       *w(ixOmin1:ixOmax1,ix2,v2_)/w(ixOmin1:ixOmax1,ix2,v1_)
     if(eqpar(beta_)>zero)then
       ! set the radial velocity to be consistent with vanishing electric field
       w(ixOmin1:ixOmax1,ix2,v1_)=w(ixOmin1:ixOmax1,ix2,b1_) &
                  *w(ixOmin1:ixOmax1,ix2,v2_)/w(ixOmin1:ixOmax1,ix2,b2_)
     else
       ! take radial velocity from final mesh point
       w(ixOmin1:ixOmax1,ix2,v1_)=w(ixOmin1:ixOmax1,ixOmin2-1,m1_)/w(ixOmin1:ixOmax1,ixOmin2-1,rho_)
     endif
    enddo
    patchw(ixO^S)=.false.
    call conserve(ixG^L,ixO^L,w,patchw)
   case(m1_)
      !dummy
   case(m2_)
      !dummy
   case(e_)
      !dummy
   case(b1_)
      !dummy
   case(b2_)
      !dummy
   case default
      call mpistop("Special boundary is not defined for this variable")
   end select
case default
   call mpistop("Special boundary is not defined for this region")
end select

end subroutine specialbound_usr

!=============================================================================
subroutine bc_int(qt,ixG^L,ixO^L,w,x)

! internal boundary, user defined
!
! This subroutine can be used to artificially overwrite ALL conservative 
! variables in a user-selected region of the mesh, and thereby act as
! an internal boundary region. It is called just before external (ghost cell)
! boundary regions will be set by the BC selection. Here, you could e.g. 
! want to introduce an extra variable (nwextra, to be distinguished from nwaux)
! which can be used to identify the internal boundary region location.
! Its effect should always be local as it acts on the mesh.
!

include 'amrvacdef.f'

integer, intent(in) :: ixG^L,ixO^L
double precision, intent(in) :: qt
double precision, intent(inout) :: w(ixG^S,1:nw)
double precision, intent(in) :: x(ixG^S,1:ndim)

! .. local ..
!logical :: patchw(ixG^T)
!----------------------------------------------------------------------------

call mpistop("bc_int not defined")

! just to give an example for relativistic MHD
!  -----------------------------------------
!patchw(ixO^S)=.true.
!where (({^D&x(ixO^S,^D)**2+})<half**2.0d0) 
!    patchw(ixO^S) = .false.
!  ^C&w(ixO^S,v^C_)=zero;
!  ^C&w(ixO^S,b^C_)=zero;
!    w(ixO^S,b3_) = one
!    w(ixO^S,v1_) = 0.99
!    w(ixO^S,rho_) = 1.d0
!    w(ixO^S,pp_)  = 2.0d0
!    w(ixO^S,lfac_)=one/dsqrt(one-({^C&w(ixO^S,v^C_)**2.0d0+}))
!end where
!!if (useprimitiveRel) then
!!  where (({^D&x(ixO^S,^D)**2+})<half**2.0d0) 
!!  {^C&w(ixO^S,u^C_)=w(ixO^S,lfac_)*w(ixO^S,v^C_);\}
!!  end where
!!endif
!call conserve(ixG^L,ixO^L,w,patchw)

end subroutine bc_int
!=============================================================================
!=============================================================================
! amrvacusr.t.bowmhd22
!=============================================================================
