!=============================================================================
! amrvacusr.t.swifftestKHmhd23

! INCLUDE:amrvacnul/specialini.t
!INCLUDE:amrvacnul/speciallog.t
INCLUDE:amrvacnul/specialbound.t
!INCLUDE:amrvacnul/specialsource.t
!=============================================================================
subroutine initglobaldata_usr

include 'amrvacdef.f'

integer,dimension(:),allocatable:: seed
integer::  seed_size
real:: randphaseP1(1:1000)

!-----------------------------------------------------------------------------
eqpar(gamma_)=5.0d0/3.0d0

select case(iprob)
 case(1)
   eqpar(eta_)=zero
 case(2)
   eqpar(eta_)=0.001d0
 case(3)
   eqpar(eta_)=0.0001d0
endselect 

randphase(1:1000)=zero
eqpar(nymodes_)=512/4
if(eqpar(nymodes_)>1000) call mpistop('too many modes')
if(mype==0)then
      print *,'nymodes=',nymodes_
      print *,'number of modes=',eqpar(nymodes_)
      write(*,*)'seeding random number generator, on mype==',mype
      call random_seed(SIZE=seed_size)
      allocate(seed(seed_size))
      call random_seed(GET=seed(1:seed_size))
      call random_number(randphaseP1(1:eqpar(nymodes_)))
      write(*,*)'random numbers are:',randphaseP1(1:eqpar(nymodes_))
      randphase(1:eqpar(nymodes_))=dble(randphaseP1(1:eqpar(nymodes_)))
endif
print *,'BEFORE on ipe=',mype,' we have phases',randphase(1:eqpar(nymodes_))

call MPI_BARRIER(icomm,ierrmpi)

if(npe>1)then
    call MPI_BCAST(randphase,1000,MPI_DOUBLE_PRECISION,0,icomm,ierrmpi)
endif

!print *,'AFTER on ipe=',mype,' we have phases',randphase(1:eqpar(nymodes_))
!call mpistop('test')

end subroutine initglobaldata_usr
!=============================================================================
subroutine initonegrid_usr(ixG^L,ix^L,w,x)

! initialize one grid 

include 'amrvacdef.f'

integer, intent(in) :: ixG^L,ix^L
double precision, intent(in) :: x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw)

logical::          first
integer::          imode
double precision:: aeqv,b0val,theta,leq,xmid
double precision:: lysize,lxsize,veps


logical, dimension(ixG^T)           :: patchw
double precision, dimension(ixG^T)  :: tmpsin,tmpcos

data first/.true./
!----------------------------------------------------------------------------
oktest = index(teststr,'initonegrid_usr')>=1
if (oktest) write(unitterm,*) ' === initonegrid_usr  (in ) : ', &
                'ixG^L : ',ixG^L

if (typephys/='mhd') then
   call mpistop("test problem is MHD problem: set typephys!")
end if

   ! setamrvac -d=23 -phi=0 -z=0 -g=16,16 -p=mhd -u=swifftestKHmhd23
   {^IFONED   call mpistop("prob is 2D") }
   {^IFTHREED call mpistop("prob is 2D") }
   {^IFTWOD
   aeqv=one
   b0val=one
   theta=0.05d0
   xmid=half*(xprobmax1-xprobmin1)
   leq=3.0d0
   veps=0.005d0
   lysize=(xprobmax2-xprobmin2)
   lxsize=(xprobmax1-xprobmin1)
   w(ixG^S,rho_)=one
   w(ixG^S,e_)=half
   w(ixG^S,b1_)=zero
   w(ixG^S,b2_)=b0val*dsin(theta)
   w(ixG^S,b3_)=b0val*dcos(theta)
   if(first .and. mype==0)then
      write(*,*)'Doing 2.5D MHD, Kelvin-Helmholtz test'
      write(*,*)'aeqv,by0,bz0,leq,xmid:'
      write(*,*) aeqv,b0val*dsin(theta),b0val*dcos(theta),leq,xmid
      write(*,*)'number of mode numbers=',eqpar(nymodes_)
      write(*,*)'phases=',randphase(1:eqpar(nymodes_))
   endif
   if(first)then
      first=.false.
   endif
   tmpsin(ixG^S)=zero
   tmpcos(ixG^S)=zero
   do imode=1,eqpar(nymodes_)
      tmpsin(ixG^S)=tmpsin(ixG^S)+ &
        dsin(two*dpi*dble(imode)*(x(ixG^S,2)/lysize)+randphase(imode))
      tmpcos(ixG^S)=tmpcos(ixG^S)+ &
        dcos(two*dpi*dble(imode)*(x(ixG^S,2)/lysize)+randphase(imode)) &
        /dble(imode)
   enddo
   w(ixG^S,m1_)=(two*dpi*veps/lysize) &
       *dexp(-((x(ixG^S,1)-xmid)/leq)**2)*tmpsin(ixG^S)
   w(ixG^S,m2_)=aeqv*dtanh((x(ixG^S,1)-xmid)/leq) &
       -(two*veps*(x(ixG^S,1)-xmid)/leq**2) &
       *dexp(-((x(ixG^S,1)-xmid)/leq)**2)*tmpcos(ixG^S)
   w(ixG^S,m3_)=zero
   w(ixG^S,e_)=w(ixG^S,e_)/(eqpar(gamma_)-one)+&
     half*(w(ixG^S,rho_)*(^C&w(ixG^S,m^C_)**2+)+(^C&w(ixG^S,b^C_)**2+))
   \}

end subroutine initonegrid_usr
!=============================================================================
subroutine specialsource(qdt,ixI^L,ixO^L,iw^LIM,qtC,wCT,qt,w,x)

! Calculate w(iw)=w(iw)+qdt*SOURCE[wCT,qtC,x] within ixO for all indices
! iw=iwmin...iwmax.  wCT is at time qCT

include 'amrvacdef.f'

integer, intent(in) :: ixI^L, ixO^L, iw^LIM
double precision, intent(in) :: qdt, qtC, qt, x(ixI^S,1:ndim)
double precision, intent(inout) :: wCT(ixI^S,1:nw), w(ixI^S,1:nw)

! integer :: iw
! double precision :: s(ixG^T)
!-----------------------------------------------------------------------------

! do iw= iw^LIM
!    select case(iw)
!    case(m1_)
!       ! The source is based on the time centered wCT
!       call getmyforce(wCT,ixO^L,s)
!       w(ixO^S,m1_)=w(ixO^S,m1_) + qdt*s(ixO^S)
!    case(e_)
!       call getmyheating(wCT,ixO^L,s)
!       w(ixO^S,e_) =w(ixO^S,e_)  + qdt*s(ixO^S)
!    end select
! end do

end subroutine specialsource
!=============================================================================
subroutine getdt_special(w,ixG^L,ix^L,dtnew,dx^D,x)

! Limit "dt" further if necessary, e.g. due to the special source terms.
! The getdt_courant (CFL condition) and the getdt subroutine in the AMRVACPHYS
! module have already been called.

include 'amrvacdef.f'

integer, intent(in) :: ixG^L, ix^L
double precision, intent(in) :: dx^D, x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw), dtnew
!-----------------------------------------------------------------------------

dtnew=bigdouble

end subroutine getdt_special
!=============================================================================
subroutine specialeta(w,ixI^L,ix^L,idirmin,x,current,eta)

! Set the "eta" array for resistive MHD based on w or the
! "current" variable which has components between idirmin and 3.

include 'amrvacdef.f'

integer, intent(in) :: ixI^L, ix^L, idirmin
double precision, intent(in) :: w(ixI^S,nw), x(ixI^S,1:ndim)

double precision :: current(ixG^T,7-2*ndir:3), eta(ixG^T)
!-----------------------------------------------------------------------------

!  eta(ix^S)=...

call mpistop("specialeta is not defined")

end subroutine specialeta
!=============================================================================
subroutine specialrefine_grid(igrid,level,ixG^L,ix^L,qt,w,x,refine,coarsen)

! Enforce additional refinement or coarsening
! One can use the coordinate info in x and/or time qt=t_n and w(t_n) values w.

include 'amrvacdef.f'

integer, intent(in) :: igrid, level, ixG^L, ix^L
double precision, intent(in) :: qt, w(ixG^S,1:nw), x(ixG^S,1:ndim)
integer, intent(inout) :: refine, coarsen
double precision :: xmid
!-----------------------------------------------------------------------------

{^IFTWOD 
xmid=half*(xprobmax1-xprobmin1)
if ((any(dabs(x(ix^S,1)-xmid) < 0.5d0))) refine=1 
\}

end subroutine specialrefine_grid
!=============================================================================
subroutine specialvarforerrest(ixI^L,ixO^L,iflag,w,var)

! this is the place to compute a local auxiliary variable to be used
! as refinement criterion for the Lohner error estimator only
!  -->it is then requiring and iflag>nw
! note that ixO=ixI=ixG, hence the term local (gradients need special attention!)

include 'amrvacdef.f'

integer, intent(in)          :: ixI^L,ixO^L,iflag
double precision, intent(in) :: w(ixI^S,1:nw)
double precision, intent(out):: var(ixG^T)
!-----------------------------------------------------------------------------

if (iflag >nw)call mpistop(' iflag> nw, make change in parfile or in user file')

var(ixI^S) = zero

end subroutine specialvarforerrest
!=============================================================================
subroutine specialsource_impl(qdt,ixI^L,ixO^L,iw^LIM,qtC,wCT,qt,w,x)

include 'amrvacdef.f'

integer, intent(in) :: ixI^L, ixO^L, iw^LIM
double precision, intent(in) :: qdt, qtC, qt, x(ixI^S,1:ndim)
double precision, intent(inout) :: w(ixI^S,1:nw), wCT(ixI^S,1:nw)
!-----------------------------------------------------------------------------

end subroutine specialsource_impl
!=============================================================================
subroutine getdt_impl(w,ixG^L,ix^L,dtnew,dx^D,x)

include 'amrvacdef.f'

integer, intent(in) :: ixG^L,ix^L
double precision, intent(in) :: dx^D, x(ixG^S,1:ndim)
! note that depending on strictsmall etc, w values may change
double precision, intent(inout) :: w(ixG^S,1:nw), dtnew
!-----------------------------------------------------------------------------
dtnew=bigdouble

end subroutine getdt_impl
!=============================================================================
subroutine specialset_B0(ixI^L,ixO^L,x,wB0)

! Here one can add a steady (time-independent) potential background field

include 'amrvacdef.f'

integer, intent(in)           :: ixI^L,ixO^L
double precision, intent(in)  :: x(ixG^T,1:ndim)
double precision, intent(inout) :: wB0(ixI^S,1:ndir)
!-----------------------------------------------------------------------------

end subroutine specialset_B0
!=============================================================================
subroutine printlog_special

include 'amrvacdef.f'
!-----------------------------------------------------------------------------
oktest = index(teststr,'printlog')>=1

call mpistop("special log file undefined")

end subroutine printlog_special
!=============================================================================
subroutine process_grid_usr(igrid,level,ixI^L,ixO^L,qt,w,x)

! this subroutine is ONLY to be used for computing auxiliary variables
! which happen to be non-local (like div v), and are in no way used for
! flux computations. As auxiliaries, they are also not advanced

include 'amrvacdef.f'

integer, intent(in):: igrid,level,ixI^L,ixO^L
double precision, intent(in):: qt,x(ixI^S,1:ndim)
double precision, intent(inout):: w(ixI^S,1:nw)
!-----------------------------------------------------------------------------

end subroutine process_grid_usr
!=============================================================================
subroutine specialvar_output(ixI^L,ixO^L,w,x,normconv)

! this subroutine can be used in convert, to add auxiliary variables to the
! converted output file, for further analysis using tecplot, paraview, ....
! these auxiliary values need to be stored in the nw+1:nw+nwauxio slots
!
! the array normconv can be filled in the (nw+1:nw+nwauxio) range with
! corresponding normalization values (default value 1)

include 'amrvacdef.f'

integer, intent(in)                :: ixI^L,ixO^L
double precision, intent(in)       :: x(ixI^S,1:ndim)
double precision                   :: w(ixI^S,nw+nwauxio)
double precision                   :: normconv(0:nw+nwauxio)


double precision :: current(ixG^T,7-2*ndir:3)

double precision                   :: gradrho(ixG^T),rho(ixG^T),drho(ixG^T)
double precision                   :: kk,kk0,grhomax,kk1
integer                            :: idims


integer, parameter:: idirmin0=7-2*ndir
integer :: idirmin,idir
double precision :: curlv(ixG^T,7-2*ndir:3),vvec(ixG^T,1:ndir)
!-----------------------------------------------------------------------------
oktest = index(teststr,'printlog')>=1

call getcurrent(w,ixI^L,ixO^L,idirmin,current)

! Example: assuming nwauxio=1 at convert stage and desire to see -w(1)
w(ixO^S,nw+1)=current(ixO^S,3)

rho(ixI^S)=w(ixI^S,rho_)
gradrho(ixO^S)=zero
do idims=1,ndim
   select case(typegrad)
   case("central")
     call gradient(rho,ixI^L,ixO^L,idims,drho)
   case("limited")
     call gradientS(rho,ixI^L,ixO^L,idims,drho)
   end select
   gradrho(ixO^S)=gradrho(ixO^S)+drho(ixO^S)**2.0d0
enddo
gradrho(ixO^S)=dsqrt(gradrho(ixO^S))
kk=5.0d0
kk0=0.01d0
kk1=1.0d0
grhomax=1000.0d0

w(ixO^S,nw+2)=dexp(-kk*(gradrho(ixO^S)-kk0*grhomax)/(kk1*grhomax-kk0*grhomax))

if(saveprim)then
 vvec(ixI^S,1:ndir)=w(ixI^S,m0_+1:m0_+ndir)
else
 do idir=1,ndir
   vvec(ixI^S,idir)=w(ixI^S,m0_+idir)/w(ixI^S,rho_)
 enddo
endif
call curlvector(vvec,ixI^L,ixO^L,curlv,idirmin,idirmin0,ndir)

w(ixO^S,nw+3)=curlv(ixO^S,z_)


end subroutine specialvar_output
!=============================================================================
subroutine specialvarnames_output

! newly added variables to be concatenated with the primnames/wnames string

include 'amrvacdef.f'
!-----------------------------------------------------------------------------
oktest = index(teststr,'printlog')>=1

primnames= TRIM(primnames)//' '//'jz schlier curlvz'
wnames=TRIM(wnames)//' '//'jz schlier curlvz'

end subroutine specialvarnames_output
!=============================================================================
! amrvacusr.t.swifftestKHmhd23
!=============================================================================
