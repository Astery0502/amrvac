!=============================================================================
! amrvacusr.t.binaryhd  simulating binray stellar wind interaction
!=============================================================================
!INCLUDE:amrvacnul/specialini.t
!INCLUDE:amrvacnul/speciallog.t
INCLUDE:amrvacnul/specialbound.t
!INCLUDE:amrvacnul/specialsource.t
!=============================================================================
subroutine initglobaldata_usr

include 'amrvacdef.f'

!-----------------------------------------------------------------------------
eqpar(gamma_)=5.0d0/3.0d0   ! ratio of specific heats, monoatomic ideal gas

! ISM density and pressure such that ISM sound speed is 1
eqpar(rhoism_)=1.0d0
eqpar(pism_)=3.0d0/5.0d0

select case(iprob)
  case(1)
    ! stellar wind parameters
    eqpar(rhoinfA_)=0.1d0   ! terminal density for wind of star A
    eqpar(vinfA_)=10.0d0    ! terminal velocity wind of star A
    eqpar(rinfA_)=0.05d0    ! terminal wind radius star A
                            ! sets wind A source region
    eqpar(rhoinfB_)=0.1d0   ! terminal density for wind of star B
    eqpar(vinfB_)=10.0d0    ! terminal velocity wind of star B
    eqpar(rinfB_)=0.05d0    ! terminal wind radius star B
                            ! sets wind B source region
    ! binary parameters
    eqpar(MassA_)=1.0d0    ! mass for star A
    eqpar(MassB_)=1.0d0    ! mass for star B
    eqpar(Porb_)=1.0d0     ! orbital period for binary
    eqpar(ecc_)=0.0d0      ! eccentricity for orbit of binary
  case(2)
    ! stellar wind parameters
    eqpar(rhoinfA_)=0.1d0   ! terminal density for wind of star A
    eqpar(vinfA_)=10.0d0    ! terminal velocity wind of star A
    eqpar(rinfA_)=0.05d0    ! terminal wind radius star A
                            ! sets wind A source region
    eqpar(rhoinfB_)=0.1d0   ! terminal density for wind of star B
    eqpar(vinfB_)=10.0d0    ! terminal velocity wind of star B
    eqpar(rinfB_)=0.05d0    ! terminal wind radius star B
                            ! sets wind B source region
    ! binary parameters
    eqpar(MassA_)=1.0d0    ! mass for star A
    eqpar(MassB_)=1.0d0    ! mass for star B
    eqpar(Porb_)=1.0d0     ! orbital period for binary
    eqpar(ecc_)=0.7d0      ! eccentricity for orbit of binary
end select

! corresponding mass loss rates, depending on dimensionality
select case(ndim)
  case(2)
    eqpar(MdotA_)=2.0d0*dpi*eqpar(rinfA_)*eqpar(vinfA_)*eqpar(rhoinfA_)
    eqpar(MdotB_)=2.0d0*dpi*eqpar(rinfB_)*eqpar(vinfB_)*eqpar(rhoinfB_)
  case(3)
    eqpar(MdotA_)=4.0d0*dpi*eqpar(rinfA_)**2*eqpar(vinfA_)*eqpar(rhoinfA_)
    eqpar(MdotB_)=4.0d0*dpi*eqpar(rinfB_)**2*eqpar(vinfB_)*eqpar(rhoinfB_)
end select

! the semimajor axis of the binary
eqpar(semimajor_)=((eqpar(MassA_)+eqpar(MassB_))*eqpar(Porb_)**2)**(1.0d0/3.0d0)

! these are for debug purposes, to follow the orbit computations
eqpar(xi_)=-one
eqpar(phiAB_)=-one

end subroutine initglobaldata_usr
!=============================================================================
subroutine initonegrid_usr(ixG^L,ix^L,w,x)

! initialize one grid within ix^L

include 'amrvacdef.f'

integer, intent(in) :: ixG^L, ix^L
double precision, intent(in) :: x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw)

double precision :: tstart,xstarA^D,xstarB^D,srhofactorA,srhofactorB
double precision :: RtostarA(ixG^T)
double precision :: RtostarB(ixG^T)

logical :: patchw(ixG^T)

integer:: iorbstep, norbstep
logical, save :: first=.true.
!-----------------------------------------------------------------------------

if(mype==0.and.first)then
  print *,'============================================================='
  print *,' HD simulation for stellar binary wind interaction'
  print *,'============================================================='
  print *,'equation and ISM parameters are:'
  print *,' gamma set to:', eqpar(gamma_),' Pism=',eqpar(pism_) 
  print *,' density for ISM:',eqpar(rhoism_)
  print *,'============================================================='
  print *,'stellar parameters for star A: mass, mdot, vinf, rinf, rhoinf:' 
  print *,eqpar(MassA_),eqpar(MdotA_),eqpar(vinfA_),eqpar(rinfA_),eqpar(rhoinfA_)
  print *,'============================================================='
  print *,'stellar parameters for star B: mass, mdot, vinf, rinf, rhoinf:' 
  print *,eqpar(MassB_),eqpar(MdotB_),eqpar(vinfB_),eqpar(rinfB_),eqpar(rhoinfB_)
  print *,'============================================================='
  print *,'further orbital parameters: Porb, ecc, semimajor:', eqpar(Porb_),eqpar(ecc_),eqpar(semimajor_)
  print *,'============================================================='
  select case(ndim)
    case(2)
      srhofactorA=eqpar(MdotA_)/(dpi*eqpar(rinfA_)**2.0d0)
      srhofactorB=eqpar(MdotB_)/(dpi*eqpar(rinfB_)**2.0d0)
    case(3)
      srhofactorA=3.0d0*eqpar(MdotA_)/(4.0d0*dpi*eqpar(rinfA_)**3.0d0)
      srhofactorB=3.0d0*eqpar(MdotB_)/(4.0d0*dpi*eqpar(rinfB_)**3.0d0)
  end select
  print *,' source parameters are: srhofactorA,srhofactorB'
  print *,srhofactorA,srhofactorB
  print *,'============================================================='
  if(.false.)then
    print *,'Testing orbit calculation'
    print *,' periastron separation is:',eqpar(semimajor_)*(one-eqpar(ecc_))
    print *,' periastron A and B x-locations should be:',-half*eqpar(semimajor_)*(one-eqpar(ecc_)),half*eqpar(semimajor_)*(one-eqpar(ecc_))
    print *,' half orbit A and B x-locations should be:',half*eqpar(semimajor_)*(one+eqpar(ecc_)),-half*eqpar(semimajor_)*(one+eqpar(ecc_))
    print *,'============================='
    norbstep=8
    do iorbstep=0,norbstep+1
       tstart=eqpar(Porb_)*dble(iorbstep)/dble(norbstep)
       call getbinarylocations(tstart,xstarA^D,xstarB^D)
       print *,'fract. orbit t=',tstart/eqpar(Porb_),' pos. star A ',xstarA^D,' angles ',eqpar(phiAB_),eqpar(xi_)
    enddo
    norbstep=8
    do iorbstep=0,norbstep+1
       tstart=eqpar(Porb_)*dble(iorbstep)/dble(norbstep)
       call getbinarylocations(tstart,xstarA^D,xstarB^D)
       print *,'fract. orbit t=',tstart/eqpar(Porb_),' pos. star B ',xstarB^D,' angles ',eqpar(phiAB_),eqpar(xi_)
    enddo
    print *,'============================='
    call mpistop("done testing orbits")
  endif
  first=.false.
endif

! initialize everywhere with static ISM
w(ix^S,rho_)=eqpar(rhoism_)
w(ix^S,v1_)=zero
w(ix^S,v2_)=zero
w(ix^S,p_)=eqpar(pism_)

! switch to conservative variables
patchw(ixG^S)=.false.
call conserve(ixG^L,ix^L,w,patchw)

end subroutine initonegrid_usr
!=============================================================================
subroutine specialsource(qdt,ixI^L,ixO^L,iw^LIM,qtC,wCT,qt,w,x)

! Calculate w(iw)=w(iw)+qdt*SOURCE[wCT,qtC,x] within ixO for all indices
! iw=iwmin...iwmax.  wCT is at time qCT

include 'amrvacdef.f'

integer, intent(in) :: ixI^L, ixO^L, iw^LIM
double precision, intent(in) :: qdt, qtC, qt, x(ixI^S,1:ndim)
double precision, intent(inout) :: wCT(ixI^S,1:nw), w(ixI^S,1:nw)

integer :: iw
double precision :: xstarA^D,xstarB^D, srhofactorA, srhofactorB
double precision :: RtostarA(ixG^T), RtostarB(ixG^T)
double precision :: srho(ixG^T), sm1(ixG^T), sm2(ixG^T)
!-----------------------------------------------------------------------------

call getbinarylocations(qtC,xstarA^D,xstarB^D)
RtostarA(ixO^S)=dsqrt((x(ixO^S,1)-xstarA1)**2+(x(ixO^S,2)-xstarA2)**2)
RtostarB(ixO^S)=dsqrt((x(ixO^S,1)-xstarB1)**2+(x(ixO^S,2)-xstarB2)**2)

select case(ndim)
  case(2)
      srhofactorA=eqpar(MdotA_)/(dpi*eqpar(rinfA_)**2.0d0)
      srhofactorB=eqpar(MdotB_)/(dpi*eqpar(rinfB_)**2.0d0)
  case(3)
      srhofactorA=3.0d0*eqpar(MdotA_)/(4.0d0*dpi*eqpar(rinfA_)**3.0d0)
      srhofactorB=3.0d0*eqpar(MdotB_)/(4.0d0*dpi*eqpar(rinfB_)**3.0d0)
end select

do iw= iw^LIM
    select case(iw)
    case(rho_)
       srho(ixO^S)=zero
       where(RtostarA(ixO^S)<=eqpar(rinfA_))
          srho(ixO^S)=srhofactorA
       endwhere
       where(RtostarB(ixO^S)<=eqpar(rinfB_))
          srho(ixO^S)=srhofactorB
       endwhere
       w(ixO^S,rho_)=w(ixO^S,rho_) + qdt*srho(ixO^S)
   case(m1_)
       sm1(ixO^S)=zero
       where(RtostarA(ixO^S)<=eqpar(rinfA_))
          sm1(ixO^S)=srhofactorA*eqpar(vinfA_)*(x(ixO^S,1)-xstarA1)/RtostarA(ixO^S)
       endwhere
       where(RtostarB(ixO^S)<=eqpar(rinfB_))
          sm1(ixO^S)=srhofactorB*eqpar(vinfB_)*(x(ixO^S,1)-xstarB1)/RtostarB(ixO^S)
       endwhere
       w(ixO^S,m1_) =w(ixO^S,m1_)  + qdt*sm1(ixO^S)
   case(m2_)
       sm2(ixO^S)=zero
       where(RtostarA(ixO^S)<=eqpar(rinfA_))
          sm2(ixO^S)=srhofactorA*eqpar(vinfA_)*(x(ixO^S,2)-xstarA2)/RtostarA(ixO^S)
       endwhere
       where(RtostarB(ixO^S)<=eqpar(rinfB_))
          sm2(ixO^S)=srhofactorB*eqpar(vinfB_)*(x(ixO^S,2)-xstarB2)/RtostarB(ixO^S)
       endwhere
       w(ixO^S,m2_) =w(ixO^S,m2_)  + qdt*sm2(ixO^S)
    case(e_)
       srho(ixO^S)=zero
       where(RtostarA(ixO^S)<=eqpar(rinfA_))
          srho(ixO^S)=half*srhofactorA*eqpar(vinfA_)**2
       endwhere
       where(RtostarB(ixO^S)<=eqpar(rinfB_))
          srho(ixO^S)=half*srhofactorB*eqpar(vinfB_)**2
       endwhere
       w(ixO^S,e_)=w(ixO^S,e_) + qdt*srho(ixO^S)
   end select
end do

end subroutine specialsource
!=============================================================================
subroutine getbinarylocations(qt,xstarA^D,xstarB^D)

! this subroutine determines the position of the binary component stars
! at time qt, we compute the x and y locations of both stars

! we assume initial position such that A and B are at periastron on time zero
! both along the x-axis (time of periastron passage and longitude of periastron set to zero)

include 'amrvacdef.f'

double precision, intent(in) :: qt
double precision, intent(out) :: xstarA^D, xstarB^D

integer :: maxiter, iter
double precision:: epsilon, ksiold, ksinew, dAB, phiAB, dABx^D, time
!-----------------------------------------------------------------------------

! accuracy asked for fixed point iteration on Kepler's equation
epsilon=1.0d-8
! maximum number of iterations performed
maxiter=1000

! ensure time between 0 en Porb
time=qt
do while((time-eqpar(Porb_))>epsilon)
     time=qt-eqpar(Porb_)
enddo

! fixed point iteration on Kepler's equation
iter=0
! start guess is zero value
if(eqpar(xi_)<zero.or.(time<10.0d0*epsilon)) then
   ksiold=0.0d0
else
   ksiold=eqpar(xi_)
endif
do while(iter<=maxiter)
     ksinew=eqpar(ecc_)*dsin(ksiold)+2.0d0*dpi*time/eqpar(Porb_)
     if(dabs(ksinew-ksiold)<epsilon) exit
     ksiold=ksinew
     iter=iter+1
enddo

! stop when fixed point iteration failed
if(iter==maxiter)then
     if(mype==0)then
       print *,'qt,iter,ksiold,ksinew,epsilon'
       print *,qt,iter,ksiold,ksinew,epsilon
     endif
     call mpistop("iteration for Kepler failed within maxiter iterations")
endif


! distance from A to B
dAB=eqpar(semimajor_)*(one-eqpar(ecc_)*dcos(ksinew))
! polar angle from A to B, as viewed from star A
phiAB=dacos((dcos(ksinew)-eqpar(ecc_))/(one-eqpar(ecc_)*dcos(ksinew)))

if(time>eqpar(Porb_)/2.0d0)phiAB=2.0d0*dpi-phiAB

eqpar(xi_)=ksinew
eqpar(phiAB_)=phiAB

! x and y components of vector from star A to star B
dABx1=dAB*dcos(phiAB)
dABx2=dAB*dsin(phiAB)

! positions of stars A and B
xstarA^D=-eqpar(MassB_)*dABx^D/(eqpar(MassA_)+eqpar(MassB_));
xstarB^D=+eqpar(MassA_)*dABx^D/(eqpar(MassA_)+eqpar(MassB_));

end subroutine getbinarylocations
!=============================================================================
subroutine getdt_special(w,ixG^L,ix^L,dtnew,dx^D,x)

! Limit "dt" further if necessary, e.g. due to the special source terms.
! The getdt_courant (CFL condition) and the getdt subroutine in the AMRVACPHYS
! module have already been called.

include 'amrvacdef.f'

integer, intent(in) :: ixG^L, ix^L
double precision, intent(in) :: dx^D, x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw), dtnew
!-----------------------------------------------------------------------------

! use a CFL like condition based on (spherical) orbital revolution rate
dtnew=min(dtnew,dtdiffpar*dx1/(2.0d0*dpi*eqpar(semimajor_)/eqpar(Porb_)))
dtnew=min(dtnew,dtdiffpar*dx2/(2.0d0*dpi*eqpar(semimajor_)/eqpar(Porb_)))

end subroutine getdt_special
!=============================================================================
subroutine specialeta(w,ixI^L,ix^L,idirmin,x,current,eta)

! Set the "eta" array for resistive MHD based on w or the
! "current" variable which has components between idirmin and 3.

include 'amrvacdef.f'

integer, intent(in) :: ixI^L, ix^L, idirmin
double precision, intent(in) :: w(ixI^S,nw), x(ixI^S,1:ndim)

double precision :: current(ixG^T,7-2*ndir:3), eta(ixG^T)
!-----------------------------------------------------------------------------

call mpistop("specialeta is not defined")

end subroutine specialeta
!=============================================================================
subroutine specialrefine_grid(igrid,level,ixG^L,ix^L,qt,w,x,refine,coarsen)

! Enforce additional refinement or coarsening
! One can use the coordinate info in x and/or time qt=t_n and w(t_n) values w.

! you must set consistent values for integers refine/coarsen:

! refine = -1 enforce to not refine
! refine =  0 doesn't enforce anything
! refine =  1 enforce refinement

! coarsen = -1 enforce to not coarsen
! coarsen =  0 doesn't enforce anything
! coarsen =  1 enforce coarsen

include 'amrvacdef.f'

integer, intent(in) :: igrid, level, ixG^L, ix^L
double precision, intent(in) :: qt, w(ixG^S,1:nw), x(ixG^S,1:ndim)
integer, intent(inout) :: refine, coarsen

double precision :: xstarA^D,xstarB^D
double precision :: RtostarA(ixG^T), RtostarB(ixG^T)
!-----------------------------------------------------------------------------

call getbinarylocations(qt,xstarA^D,xstarB^D)
RtostarA(ix^S)=dsqrt((x(ix^S,1)-xstarA1)**2+(x(ix^S,2)-xstarA2)**2)
RtostarB(ix^S)=dsqrt((x(ix^S,1)-xstarB1)**2+(x(ix^S,2)-xstarB2)**2)

! enforce refinement within terminal radius about each star
if (any(RtostarA(ix^S)<=eqpar(rinfA_).or.RtostarB(ix^S)<=eqpar(rinfB_))) then
  refine=1
  coarsen=-1
endif

end subroutine specialrefine_grid
!=============================================================================
subroutine specialvarforerrest(ixI^L,ixO^L,iflag,w,var)

! this is the place to compute a local auxiliary variable to be used
! as refinement criterion for the Lohner error estimator only
!  -->it is then requiring and iflag>nw
! note that ixO=ixI=ixG, hence the term local (gradients need special attention!)

include 'amrvacdef.f'

integer, intent(in)          :: ixI^L,ixO^L,iflag
double precision, intent(in) :: w(ixI^S,1:nw)
double precision, intent(out):: var(ixG^T)
!-----------------------------------------------------------------------------

if (iflag >nw)call mpistop(' iflag> nw, make change in parfile or in user file')

var(ixI^S) = zero 

end subroutine specialvarforerrest

!=============================================================================
subroutine printlog_special

include 'amrvacdef.f'
!-----------------------------------------------------------------------------
oktest = index(teststr,'printlog')>=1

call mpistop("special log file undefined")

end subroutine printlog_special
!=============================================================================
subroutine process_grid_usr(igrid,level,ixI^L,ixO^L,qt,w,x)

! this subroutine is ONLY to be used for computing auxiliary variables
! which happen to be non-local (like div v), and are in no way used for
! flux computations. As auxiliaries, they are also not advanced

include 'amrvacdef.f'

integer, intent(in):: igrid,level,ixI^L,ixO^L
double precision, intent(in):: qt,x(ixI^S,1:ndim)
double precision, intent(inout):: w(ixI^S,1:nw)
!-----------------------------------------------------------------------------

end subroutine process_grid_usr
!=============================================================================
subroutine specialvar_output(ixI^L,ixO^L,w,x,normconv)

! this subroutine can be used in convert, to add auxiliary variables to the
! converted output file, for further analysis using tecplot, paraview, ....
! these auxiliary values need to be stored in the nw+1:nw+nwauxio slots
!
! the array normconv can be filled in the (nw+1:nw+nwauxio) range with 
! corresponding normalization values (default value 1)

include 'amrvacdef.f'

integer, intent(in)                :: ixI^L,ixO^L
double precision, intent(in)       :: x(ixI^S,1:ndim)
double precision                   :: w(ixI^S,nw+nwauxio)
double precision                   :: normconv(0:nw+nwauxio)
integer :: idims
double precision       :: drho(ixG^T),gradrho(ixG^T),kkk,kk0,kk1,grhomax
!-----------------------------------------------------------------------------
oktest = index(teststr,'printlog')>=1

!!!call mpistop("special output file undefined")

! Example: assuming nwauxio=1 at convert stage and desire to see -w(1)
kkk=10.0d0
kk1=1.0d0
kk0=0.01d0
grhomax=50.0d0

gradrho(ixO^S)=zero
do idims=1,ndim
  drho(ixO^S)=zero
  call gradient(w(ixI^S,rho_),ixO^L,idims,drho)
  gradrho(ixO^S)=gradrho(ixO^S)+drho(ixO^S)**2.0d0
enddo

gradrho(ixO^S)=dsqrt(gradrho(ixO^S))
w(ixO^S,nw+1)=dexp(-kkk*(gradrho(ixO^S)-kk0*grhomax)/(kk1*grhomax-kk0*grhomax))

end subroutine specialvar_output
!=============================================================================
subroutine specialvarnames_output

! newly added variables need to be concatenated with the varnames/primnames string

include 'amrvacdef.f'
!-----------------------------------------------------------------------------
oktest = index(teststr,'printlog')>=1

!call mpistop("special varnames and primnames undefined")

! Example : as above in specialvar_output, assuming relativistic HD here...
primnames= TRIM(primnames)//' '//'Schlier'
wnames=TRIM(wnames)//' '//'Schlier'

end subroutine specialvarnames_output
!=============================================================================
!=============================================================================
! amrvacusr.t.binaryhd
!=============================================================================
