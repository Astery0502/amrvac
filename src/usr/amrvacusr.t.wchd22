!=============================================================================
! amrvacusr.t.wchd22

! INCLUDE:amrvacnul/specialini.t
INCLUDE:amrvacnul/speciallog.t
INCLUDE:amrvacnul/specialimpl.t
! INCLUDE:amrvacnul/specialbound.t
INCLUDE:amrvacnul/specialsource.t
!=============================================================================
subroutine initglobaldata_usr

include 'amrvacdef.f'
!-----------------------------------------------------------------------------

eqpar(gamma_)=1.4d0

end subroutine initglobaldata_usr
!=============================================================================
subroutine initonegrid_usr(ixG^L,ix^L,w,x)

! initialize one grid 

include 'amrvacdef.f'

integer, intent(in) :: ixG^L, ix^L
double precision, intent(in) :: x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw)

double precision :: m1post, m2post, epost
!----------------------------------------------------------------------------

{^IFONED call mpistop("This is a 2D HD problem: Woodward and Collela")}
{^IFTHREED call mpistop("This is a 2D HD problem: Woodward and Collela")}
{^IFTWOD
m1post=8.d0*8.25d0*dsin(dpi/3.d0)
m2post=-8.0d0*8.25d0*dcos(dpi/3.d0)
epost=1.165d2/(eqpar(gamma_)-1.d0)+(m1post**2+m2post**2)/(two*8.0d0)
!print *,'e_pre=',one/(eqpar(gamma_)-one)
!print *,'e_post=',epost
where(x(ix^S,1)>(x(ix^S,2)/dtan(dpi/3.d0)+1.d0/6.d0))
   ! pre shock region
   w(ix^S,rho_)=1.4d0
   w(ix^S,m1_)=zero
   w(ix^S,m2_)=zero
   w(ix^S,e_)=one/(eqpar(gamma_)-one)
endwhere
where(x(ix^S,1)<=(x(ix^S,2)/dtan(dpi/3.d0)+1.d0/6.d0))
   ! post shock region
   w(ix^S,rho_)=8.d0
   w(ix^S,m1_)=m1post
   w(ix^S,m2_)=m2post
   w(ix^S,e_)=epost
endwhere
}

end subroutine initonegrid_usr
!=============================================================================
subroutine specialbound_usr(qt,ixG^L,ixO^L,iw,iB,w,x)

! special boundary types, user defined

include 'amrvacdef.f'

integer, intent(in) :: ixG^L, ixO^L, iw, iB
double precision, intent(in) :: qt, x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw)

integer :: ix2
double precision :: pree, m1post, m2post, epost
!----------------------------------------------------------------------------

m1post=8.d0*8.25d0*dsin(dpi/3.d0)
m2post=-8.0d0*8.25d0*dcos(dpi/3.d0)
epost=1.165d2/(eqpar(gamma_)-1.d0)+(m1post**2+m2post**2)/(two*8.0d0)
pree=one/(eqpar(gamma_)-one)
select case(iB)
! implementation of fixed postshock state at left boundary
case(1)
   select case(iw)
   case(rho_)
      w(ixO^S,rho_)=8.d0
   case(m1_)
      w(ixO^S,m1_) =m1post
   case(m2_)
      w(ixO^S,m2_) =m2post
   case(e_)
      w(ixO^S,e_)  =epost
   case default
      call mpistop("Special boundary is not defined for this variable")
   end select
! implementation of bottom boundary: fixed before x<1/6, solid wall x>=1/6
case(3)
   ! first pretend all variables are symmetric everywhere
   ! then overwrite with fixed postshock values before x<1/6
   select case(iw)
      case(rho_)
         do ix2=ixOmin2,ixOmax2
            w(ixOmin1:ixOmax1,ix2,rho_)=w(ixOmin1:ixOmax1,2*ixOmax2-ix2+1,rho_)
         enddo
         where(x(ixO^S,1)<=1.d0/6.d0)
            w(ixO^S,rho_)=8.d0
         endwhere
      case(m1_)
         do ix2=ixOmin2,ixOmax2
            w(ixOmin1:ixOmax1,ix2,m1_)=w(ixOmin1:ixOmax1,2*ixOmax2-ix2+1,m1_)
         enddo
         where(x(ixO^S,1)<=1.d0/6.d0)
            w(ixO^S,m1_)=m1post
         endwhere
      case(m2_)
         do ix2=ixOmin2,ixOmax2
            w(ixOmin1:ixOmax1,ix2,m2_)=w(ixOmin1:ixOmax1,2*ixOmax2-ix2+1,m2_)
         enddo
         ! make v_y asymmetric
         w(ixO^S,m2_)= -w(ixO^S,m2_)
         where(x(ixO^S,1)<=1.d0/6.d0)
            w(ixO^S,m2_)=m2post
         endwhere
      case(e_)
         do ix2=ixOmin2,ixOmax2
            w(ixOmin1:ixOmax1,ix2,e_)=w(ixOmin1:ixOmax1,2*ixOmax2-ix2+1,e_)
         enddo
         where(x(ixO^S,1)<=1.d0/6.d0)
            w(ixO^S,e_)=epost
         endwhere
      case default
         call mpistop("Special boundary is not defined for this variable")
   end select
! implementation of top boundary: pre/post shock state, time-dependent
case(4)
   select case(iw)
   case(rho_)
      ! pre shock region
      where(x(ixO^S,1)> &
        (1.0d1*qt/dsin(dpi/3.d0)+x(ixO^S,2)/dtan(dpi/3.d0)+1.d0/6.d0))
         w(ixO^S,rho_)= 1.4d0
      endwhere
      ! post shock region
      where(x(ixO^S,1)<= &
        (1.0d1*qt/dsin(dpi/3.d0)+x(ixO^S,2)/dtan(dpi/3.d0)+1.d0/6.d0))
         w(ixO^S,rho_)= 8.d0
      endwhere
   case(m1_)
      ! pre shock region
      where(x(ixO^S,1)> &
        (1.0d1*qt/dsin(dpi/3.d0)+x(ixO^S,2)/dtan(dpi/3.d0)+1.d0/6.d0))
        w(ixO^S,m1_) = zero
      endwhere
      ! post shock region
      where(x(ixO^S,1)<= &
        (1.0d1*qt/dsin(dpi/3.d0)+x(ixO^S,2)/dtan(dpi/3.d0)+1.d0/6.d0))
        w(ixO^S,m1_)=m1post
      endwhere
   case(m2_)
      ! pre shock region
      where(x(ixO^S,1)> &
        (1.0d1*qt/dsin(dpi/3.d0)+x(ixO^S,2)/dtan(dpi/3.d0)+1.d0/6.d0))
        w(ixO^S,m2_) = 0.d0
      endwhere
      ! post shock region
      where(x(ixO^S,1)<= &
        (1.0d1*qt/dsin(dpi/3.d0)+x(ixO^S,2)/dtan(dpi/3.d0)+1.d0/6.d0))
        w(ixO^S,m2_)=m2post
      endwhere
   case(e_)
      ! pre shock region
      where(x(ixO^S,1)> &
        (1.0d1*qt/dsin(dpi/3.d0)+x(ixO^S,2)/dtan(dpi/3.d0)+1.d0/6.d0))
        w(ixO^S,e_)=pree
      endwhere
      ! post shock region
      where(x(ixO^S,1)<= &
        (1.0d1*qt/dsin(dpi/3.d0)+x(ixO^S,2)/dtan(dpi/3.d0)+1.d0/6.d0))
        w(ixO^S,e_)=epost
     endwhere
   case default
      call mpistop("Special boundary is not defined for this variable")
   end select
case default
   call mpistop("Special boundary is not defined for this region")
end select

end subroutine specialbound_usr

!=============================================================================
subroutine bc_int(qt,ixG^L,ixO^L,w,x)

! internal boundary, user defined
!
! This subroutine can be used to artificially overwrite ALL conservative 
! variables in a user-selected region of the mesh, and thereby act as
! an internal boundary region. It is called just before external (ghost cell)
! boundary regions will be set by the BC selection. Here, you could e.g. 
! want to introduce an extra variable (nwextra, to be distinguished from nwaux)
! which can be used to identify the internal boundary region location.
! Its effect should always be local as it acts on the mesh.
!

include 'amrvacdef.f'

integer, intent(in) :: ixG^L,ixO^L
double precision, intent(in) :: qt
double precision, intent(inout) :: w(ixG^S,1:nw)
double precision, intent(in) :: x(ixG^S,1:ndim)

! .. local ..
!logical :: patchw(ixG^T)
!----------------------------------------------------------------------------

call mpistop("bc_int not defined")

! just to give an example for relativistic MHD
!  -----------------------------------------
!patchw(ixO^S)=.true.
!where (({^D&x(ixO^S,^D)**2+})<half**2.0d0) 
!    patchw(ixO^S) = .false.
!  ^C&w(ixO^S,v^C_)=zero;
!  ^C&w(ixO^S,b^C_)=zero;
!    w(ixO^S,b3_) = one
!    w(ixO^S,v1_) = 0.99
!    w(ixO^S,rho_) = 1.d0
!    w(ixO^S,pp_)  = 2.0d0
!    w(ixO^S,lfac_)=one/dsqrt(one-({^C&w(ixO^S,v^C_)**2.0d0+}))
!end where
!!if (useprimitiveRel) then
!!  where (({^D&x(ixO^S,^D)**2+})<half**2.0d0) 
!!  {^C&w(ixO^S,u^C_)=w(ixO^S,lfac_)*w(ixO^S,v^C_);\}
!!  end where
!!endif
!call conserve(ixG^L,ixO^L,w,patchw)

end subroutine bc_int
!=============================================================================
!=============================================================================
! amrvacusr.t.wchd22
!=============================================================================
