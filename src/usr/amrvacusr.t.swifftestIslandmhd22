!=============================================================================
! amrvacusr.t.swifftestIslandmhd22

! INCLUDE:amrvacnul/specialini.t
!INCLUDE:amrvacnul/speciallog.t
INCLUDE:amrvacnul/specialbound.t
!INCLUDE:amrvacnul/specialsource.t
!=============================================================================
subroutine initglobaldata_usr

include 'amrvacdef.f'
!-----------------------------------------------------------------------------
eqpar(gamma_)=5.0d0/3.0d0

select case(iprob)
 case(1)
   eqpar(eta_)=zero
 case(2)
   eqpar(eta_)=0.001d0
 case(3)
   eqpar(eta_)=0.0001d0
endselect 

end subroutine initglobaldata_usr
!=============================================================================
subroutine initonegrid_usr(ixG^L,ix^L,w,x)

! initialize one grid 

include 'amrvacdef.f'

integer, intent(in) :: ixG^L,ix^L
double precision, intent(in) :: x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw)

logical::          first
double precision:: a0val,phi0val,p0val,T0val,tpi
double precision:: minbb,maxbb,minbeta,maxbeta,minrat,maxrat
double precision:: tmp(ixG^T)

logical, dimension(ixG^T)           :: patchw(ixG^T)

data first/.true./
!----------------------------------------------------------------------------
oktest = index(teststr,'initonegrid_usr')>=1
if (oktest) write(unitterm,*) ' === initonegrid_usr  (in ) : ', &
                'ixG^L : ',ixG^L

if (typephys/='mhd') then
   call mpistop("test problem is MHD problem: set typephys!")
end if

   ! setamrvac -d=22 -phi=0 -z=0 -g=16,16 -p=mhd -u=swifftestIslandmhd22
   {^IFONED   call mpistop("prob is 2D") }
   {^IFTHREED call mpistop("prob is 2D") }
   {^IFTWOD
   a0val=one/(dpi*dsqrt(two))
   phi0val=0.001d0
   p0val=0.1d0
   T0val=one
   tpi=two*dpi
   w(ix^S,p_)=p0val+two*(dsin(tpi*x(ix^S,1))*dsin(tpi*x(ix^S,2)))**2
   w(ix^S,rho_)=w(ix^S,p_)/T0val
   w(ix^S,b1_)=tpi*a0val*dsin(tpi*x(ix^S,1))*dcos(tpi*x(ix^S,2))
   w(ix^S,b2_)=-tpi*a0val*dcos(tpi*x(ix^S,1))*dsin(tpi*x(ix^S,2))
   w(ix^S,v1_)=tpi*phi0val*dsin(tpi*x(ix^S,2))
   w(ix^S,v2_)=tpi*phi0val*dsin(tpi*x(ix^S,1))
   if(first .and. mype==0)then
      write(*,*)'Doing 2D MHD, Longcope Strauss test'
      write(*,*)'a0val,phi0val,p0val:'
      write(*,*) a0val,phi0val,p0val
   tmp(ix^S)=0.5d0*(w(ix^S,b1_)**2+w(ix^S,b2_)**2)
   minbb=minval(tmp(ix^S))
   maxbb=maxval(tmp(ix^S))
      write(*,*) 'min B2=',minbb,' max B2=',maxbb
   tmp(ix^S)=two*w(ix^S,p_)/( w(ix^S,b1_)**2+ w(ix^S,b2_)**2)
   minbeta=minval(tmp(ix^S))
   maxbeta=maxval(tmp(ix^S))
      write(*,*) 'min beta=',minbeta,' max beta=',maxbeta
   tmp(ix^S)= w(ix^S,rho_)*( w(ix^S,v1_)**2+ w(ix^S,v2_)**2) &
             /( w(ix^S,b1_)**2+ w(ix^S,b2_)**2)
   minrat=minval(tmp(ix^S))
   maxrat=maxval(tmp(ix^S))
      write(*,*) 'min kin/mag=',minrat,' max kin/mag=',maxrat
   endif
   if(first)then
      first=.false.
   endif
   patchw(ix^S)=.false.
   call conserve(ixG^L,ix^L,w,patchw)
   \}

end subroutine initonegrid_usr
!=============================================================================
subroutine specialsource(qdt,ixI^L,ixO^L,iw^LIM,qtC,wCT,qt,w,x)

! Calculate w(iw)=w(iw)+qdt*SOURCE[wCT,qtC,x] within ixO for all indices
! iw=iwmin...iwmax.  wCT is at time qCT

include 'amrvacdef.f'

integer, intent(in) :: ixI^L, ixO^L, iw^LIM
double precision, intent(in) :: qdt, qtC, qt, x(ixI^S,1:ndim)
double precision, intent(inout) :: wCT(ixI^S,1:nw), w(ixI^S,1:nw)

! integer :: iw
! double precision :: s(ixG^T)
!-----------------------------------------------------------------------------

! do iw= iw^LIM
!    select case(iw)
!    case(m1_)
!       ! The source is based on the time centered wCT
!       call getmyforce(wCT,ixO^L,s)
!       w(ixO^S,m1_)=w(ixO^S,m1_) + qdt*s(ixO^S)
!    case(e_)
!       call getmyheating(wCT,ixO^L,s)
!       w(ixO^S,e_) =w(ixO^S,e_)  + qdt*s(ixO^S)
!    end select
! end do

end subroutine specialsource
!=============================================================================
subroutine getdt_special(w,ixG^L,ix^L,dtnew,dx^D,x)

! Limit "dt" further if necessary, e.g. due to the special source terms.
! The getdt_courant (CFL condition) and the getdt subroutine in the AMRVACPHYS
! module have already been called.

include 'amrvacdef.f'

integer, intent(in) :: ixG^L, ix^L
double precision, intent(in) :: dx^D, x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw), dtnew
!-----------------------------------------------------------------------------

dtnew=bigdouble

end subroutine getdt_special
!=============================================================================
subroutine specialeta(w,ixI^L,ix^L,idirmin,x,current,eta)

! Set the "eta" array for resistive MHD based on w or the
! "current" variable which has components between idirmin and 3.

include 'amrvacdef.f'

integer, intent(in) :: ixI^L, ix^L, idirmin
double precision, intent(in) :: w(ixI^S,nw), x(ixI^S,1:ndim)

double precision :: current(ixG^T,7-2*ndir:3), eta(ixG^T)
!-----------------------------------------------------------------------------

!  eta(ix^S)=...

call mpistop("specialeta is not defined")

end subroutine specialeta
!=============================================================================
subroutine specialrefine_grid(igrid,level,ixG^L,ix^L,qt,w,x,refine,coarsen)

! Enforce additional refinement or coarsening
! One can use the coordinate info in x and/or time qt=t_n and w(t_n) values w.

include 'amrvacdef.f'

integer, intent(in) :: igrid, level, ixG^L, ix^L
double precision, intent(in) :: qt, w(ixG^S,1:nw), x(ixG^S,1:ndim)
integer, intent(inout) :: refine, coarsen
double precision :: xmid
!-----------------------------------------------------------------------------

end subroutine specialrefine_grid
!=============================================================================
subroutine specialvarforerrest(ixI^L,ixO^L,iflag,w,var)

! this is the place to compute a local auxiliary variable to be used
! as refinement criterion for the Lohner error estimator only
!  -->it is then requiring and iflag>nw
! note that ixO=ixI=ixG, hence the term local (gradients need special attention!)

include 'amrvacdef.f'

integer, intent(in)          :: ixI^L,ixO^L,iflag
double precision, intent(in) :: w(ixI^S,1:nw)
double precision, intent(out):: var(ixG^T)
!-----------------------------------------------------------------------------

if (iflag >nw)call mpistop(' iflag> nw, make change in parfile or in user file')

var(ixI^S) = zero

end subroutine specialvarforerrest
!=============================================================================
subroutine specialsource_impl(qdt,ixI^L,ixO^L,iw^LIM,qtC,wCT,qt,w,x)

include 'amrvacdef.f'

integer, intent(in) :: ixI^L, ixO^L, iw^LIM
double precision, intent(in) :: qdt, qtC, qt, x(ixI^S,1:ndim)
double precision, intent(inout) :: w(ixI^S,1:nw), wCT(ixI^S,1:nw)
!-----------------------------------------------------------------------------

end subroutine specialsource_impl
!=============================================================================
subroutine getdt_impl(w,ixG^L,ix^L,dtnew,dx^D,x)

include 'amrvacdef.f'

integer, intent(in) :: ixG^L,ix^L
double precision, intent(in) :: dx^D, x(ixG^S,1:ndim)
! note that depending on strictsmall etc, w values may change
double precision, intent(inout) :: w(ixG^S,1:nw), dtnew
!-----------------------------------------------------------------------------
dtnew=bigdouble

end subroutine getdt_impl
!=============================================================================
subroutine specialset_B0(ixI^L,ixO^L,x,wB0)

! Here one can add a steady (time-independent) potential background field

include 'amrvacdef.f'

integer, intent(in)           :: ixI^L,ixO^L
double precision, intent(in)  :: x(ixG^T,1:ndim)
double precision, intent(inout) :: wB0(ixI^S,1:ndir)
!-----------------------------------------------------------------------------

end subroutine specialset_B0
!=============================================================================
subroutine printlog_special

include 'amrvacdef.f'
!-----------------------------------------------------------------------------
oktest = index(teststr,'printlog')>=1

call mpistop("special log file undefined")

end subroutine printlog_special
!=============================================================================
subroutine process_grid_usr(igrid,level,ixI^L,ixO^L,qt,w,x)

! this subroutine is ONLY to be used for computing auxiliary variables
! which happen to be non-local (like div v), and are in no way used for
! flux computations. As auxiliaries, they are also not advanced

include 'amrvacdef.f'

integer, intent(in):: igrid,level,ixI^L,ixO^L
double precision, intent(in):: qt,x(ixI^S,1:ndim)
double precision, intent(inout):: w(ixI^S,1:nw)
!-----------------------------------------------------------------------------

end subroutine process_grid_usr
!=============================================================================
subroutine specialvar_output(ixI^L,ixO^L,w,x,normconv)

! this subroutine can be used in convert, to add auxiliary variables to the
! converted output file, for further analysis using tecplot, paraview, ....
! these auxiliary values need to be stored in the nw+1:nw+nwauxio slots
!
! the array normconv can be filled in the (nw+1:nw+nwauxio) range with 
! corresponding normalization values (default value 1)

include 'amrvacdef.f'

integer, intent(in)                :: ixI^L,ixO^L
double precision, intent(in)       :: x(ixI^S,1:ndim)
double precision                   :: w(ixI^S,nw+nwauxio)
double precision                   :: normconv(0:nw+nwauxio)

integer:: idirmin

double precision :: current(ixG^T,7-2*ndir:3)
!-----------------------------------------------------------------------------
oktest = index(teststr,'printlog')>=1

call getcurrent(w,ixI^L,ixO^L,idirmin,current)

! Example: assuming nwauxio=1 at convert stage and desire to see -w(1)
w(ixO^S,nw+1)=current(ixO^S,3)

end subroutine specialvar_output
!=============================================================================
subroutine specialvarnames_output

! newly added variables to be concatenated with the primnames/wnames string

include 'amrvacdef.f'
!-----------------------------------------------------------------------------
oktest = index(teststr,'printlog')>=1

primnames= TRIM(primnames)//' '//'jz'
wnames=TRIM(wnames)//' '//'jz'

end subroutine specialvarnames_output
!=============================================================================
! amrvacusr.t.swifftestIslandmhd22
!=============================================================================
