!=============================================================================
! amrvacusr.t.mhdwind

! INCLUDE:amrvacnul/specialini.t
INCLUDE:amrvacnul/speciallog.t
!INCLUDE:amrvacnul/specialbound.t
!INCLUDE:amrvacnul/specialsource.t
!=============================================================================
subroutine initglobaldata_usr

include 'amrvacdef.f'
!----------------------------------------------------------------------------
eqpar(eta_)=0.0d0
eqpar(gamma_)=5.0d0/3.0d0

eqpar(vescape_)=3.924d0
eqpar(zeta_)=0.0127d0
eqpar(tbase_)=1.0d0
eqpar(h0_)=26.77d0
eqpar(sigma0_)=4.5d0
eqpar(T0_equator_)=1.0d0
eqpar(T0_pole_)=1.75d0
eqpar(thetach_)=17.5d0*two*dpi/360d0

eqpar(adip_)=1.53d0
eqpar(oct1_)=3.0d0*0.85d0
eqpar(oct2_)=5.0d0*0.85d0

select case (iprob)
case (1)
   eqpar(t0_)=zero
   eqpar(delt_)=zero
   eqpar(ce_)=zero
   eqpar(deltheta_)=zero
case (2)
   ! flux emergence
   eqpar(t0_)=1.0d0
   eqpar(delt_)=1.0d0
   eqpar(ce_)=-0.1d0
   eqpar(deltheta_)=0.25d0
case (3)
   ! continuous shearing
   eqpar(t0_)=zero
   eqpar(delt_)=1.0d5/4422d0      !1.0d0 -> 4422 (s)
   eqpar(ce_)=1.0d0/157.4d0       !1.0d0 -> 157.4 (km/s)
   eqpar(deltheta_)=0.2d0         !half width of shearing
case default
   call mpistop("iprob not available!")
end select

end subroutine initglobaldata_usr
!=============================================================================
subroutine initonegrid_usr(ixG^L,ix^L,w,x)

! initialize one grid

include 'amrvacdef.f'

integer, intent(in) :: ixG^L,ix^L
double precision, intent(in) :: x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw)

integer :: ix, ixcrita, ixcritb, iter_count, ix^D
double precision :: vesc, rtrans, ur0, ur1, urh, del, epsilon, vbase
!----------------------------------------------------------------------------
oktest = index(teststr,'initonegrid_usr')>=1
if (oktest) write(unitterm,*) ' === initonegrid_usr  (in ) : ', &
                'ixG^L : ',ixG^L

epsilon=1.0D-6
vesc=eqpar(vescape_)

! Initialize MHD wind with heating source term
! Start from Parker solution

!
!Parker solution
!
rtrans=(vesc**2)/4.0d0

if(.not.(rtrans>dexp(xprobmin1))) call mpistop("sonic point below domain")

if(x(ixGmin1,ixGmin^DE,r_)>rtrans) then
   ! sonic point below subdomain
   ixcrita=ixGmin1-1
   ixcritb=ixGmin1
else if(x(ixGmax1,ixGmin^DE,r_)<=rtrans) then
   ! sonic point above subdomain
   ixcrita=ixGmax1
   ixcritb=ixGmax1+1
else
   ! sonic inside subdomain
   ix=ixGmin1
   do
      ix=ix+1
      if(x(ix,ixGmin^DE,r_)>rtrans .or. ix>ixGmax1) exit
   end do
   if(ix>ixGmax1) call mpistop("something wrong with locating sonic point")
   ixcrita=ix-1
   ixcritb=ix
end if

!
! start construction of Parker solution from
! sonic point outwards
!
! Part I: from inside sonic point to base
! ------
!
      ur0=1.0d0
      do 1 ix=ixcrita,ixGmin1,-1
        iter_count=0
   21   continue
        iter_count=iter_count+1
        ur1=(((vesc**2)/(4.0d0*x(ix,ixGmin^DE,r_)))**2) &
             *dexp(0.5d0*(ur0**2+3.0d0-(vesc**2)/x(ix,ixGmin^DE,r_)))
        del=abs(ur1-ur0)
        if (del<epsilon) then
            w(ix,ixG^SE,m1_)=ur1
            ur0=ur1
            goto 1
        else
          if (iter_count<1000) then
            ur0=ur1
            goto 21
            else
            STOP 'PARKER > 1000 it.'
          endif
        endif
    1 continue
!
!
! Part II: from outside sonic point to infinity
! -------
!
      ur0=1.0d0
      do 3 ix=ixcritb,ixGmax1,+1
        iter_count=0
   22   continue
        iter_count=iter_count+1
        urh=(vesc**2)/x(ix,ixGmin^DE,r_)-3.0d0 &
           +2.0d0*dlog(16.0d0*ur0*(x(ix,ixGmin^DE,r_)**2)/(vesc**4))
        ur1=sqrt(urh)
        del=abs(ur1-ur0)
        if (del<epsilon) then
            w(ix,ixG^SE,m1_)=ur1
            ur0=ur1
            goto 3
        else
          if (iter_count<1000) then
            ur0=ur1
            goto 22
            else
            STOP 'PARKER > 1000 it.'
          endif
        endif
    3   continue
!
!
! construct solution which obeys
!   rho x v_r x r^2 = constant
! Note discrepancy between base r0 and first inner grid point...
!
vbase=(rtrans**2)*exp(3.0d0/2.0d0-2.0d0*rtrans)
w(ixG^S,rho_)=vbase/(x(ixG^S,r_)**2)/w(ixG^S,m1_)

w(ixG^S,m1_)=w(ixG^S,rho_)*w(ixG^S,v1_)
w(ixG^S,m2_)=zero
w(ixG^S,m3_)=zero

! Following lines when using no B0+B1 split
w(ixG^S,b1_)=2.0d0*eqpar(adip_)*dcos(x(ixG^S,2))/x(ixG^S,1)**3
w(ixG^S,b1_)=w(ixG^S,b1_)+(2.0d0*eqpar(oct2_)*cos(2.0d0*x(ixG^S,2)) &
                    +eqpar(oct1_)-eqpar(oct2_))*cos(x(ixG^S,2))/x(ixG^S,1)**5
w(ixG^S,b2_)=eqpar(adip_)*dsin(x(ixG^S,2))/x(ixG^S,1)**3
w(ixG^S,b2_)=w(ixG^S,b2_)+1.5d0*(eqpar(oct1_)+eqpar(oct2_) &
                        *cos(2.0d0*x(ixG^S,2)))*sin(x(ixG^S,2))/x(ixG^S,1)**5

!w(ixG^S,b1_)=zero
!w(ixG^S,b2_)=zero
w(ixG^S,b3_)=zero

w(ixG^S,e_) = (one/(eqpar(gamma_)-one))*w(ixG^S,rho_)*eqpar(tbase_) &
             + half*( ^C&w(ixG^S,m^C_)**2+ )/w(ixG^S,rho_) &
             + half*( ^C&w(ixG^S,b^C_)**2+ )

end subroutine initonegrid_usr
!=============================================================================
subroutine specialbound_usr(qt,ixG^L,ixO^L,iw,iB,w,x)

! special boundary types, user defined

include 'amrvacdef.f'

integer, intent(in) :: ixO^L, iw, iB, ixG^L
double precision, intent(in) :: qt, x(ixG^S,1:ndim)
double precision, intent(inout) :: w(ixG^S,1:nw)

integer :: ix^D, ix^L
double precision :: tmp(ixG^T), rho_bnd, vextra
!----------------------------------------------------------------------------
oktest = index(teststr,'specialbound')>=1
if (oktest) write(unitterm,*) ' === specialbound  (in ) : ', &
                'ixO^L : ',ixO^L

select case (iB)
case (1)
   select case (iw)
   case (rho_)
      rho_bnd=1.0d0
      ! linear extrapolation of density 
      ! assuming rho_bnd is density value at rmin
      w(ixOmax1,ixO^SE,rho_)=two*rho_bnd-w(ixOmax1+1,ixO^SE,rho_)
      w(ixOmin1,ixO^SE,rho_)=two*w(ixOmax1,ixO^SE,rho_)-w(ixOmax1+1,ixO^SE,rho_)
   case (m1_)
      ! constant r^2 m_r = r^2 rho vr, clip of negative (infall) velocities
      {do ix^DE= ixOmin^DE,ixOmax^DE\}
         if (w(ixOmax1+1,ix^DE,m1_)<0.0d0) then
            w(ixO^LIM1:,ix^DE,m1_)=0.0d0
         else
            w(ixO^LIM1:,ix^DE,m1_)=w(ixOmax1+1,ix^DE,m1_) &
                   *x(ixOmax1+1,ix^DE,1)**2/x(ixO^LIM1:,ix^DE,1)**2
         end if
      {end do^DE&\}
   case (m2_)
      ! constant r rho v_theta 
      forall(ix1= ixO^LIM1:) w(ix1,ixO^SE,m2_)=w(ixOmax1+1,ixO^SE,m2_) &
                   *x(ixOmax1+1,ixO^SE,1)/x(ix1,ixO^SE,1)
   case (m3_)
      ! No rotation (in corotating frame) (r m_phi =0) 
      !  and shearing during prescribed time for problem 3
      w(ixO^S,m3_)=0.0d0
      if (iprob==3) then
         if (qt>eqpar(t0_).and.qt<eqpar(t0_)+eqpar(delt_)) then
            where (abs(half*dpi-x(ixO^S,2))<eqpar(deltheta_))
               w(ixO^S,m3_)=w(ixO^S,m3_)+w(ixO^S,rho_)*eqpar(ce_)*8.68252d3 &
                        *((half*dpi-x(ixO^S,2))**2-eqpar(deltheta_)**2)**2 &
                        *sin(half*dpi-x(ixO^S,2)) &
                        *sin(dpi*(qt-eqpar(t0_))/eqpar(delt_))
            end where
         end if
      end if
   case (e_)
      ! see b3_
   case (b1_)
      ixmin1=ixOmax1; ixmax1=ixOmax1; ix^LIM^DE=ixO^LIM^DE;

      tmp(ix^S)=2.0d0*eqpar(adip_)*dcos(x(ix^S,2)) &
                +(2.0d0*eqpar(oct2_)*cos(2.0d0*x(ix^S,2)) &
                    +eqpar(oct1_)-eqpar(oct2_))*cos(x(ix^S,2))

      if (iprob==2) then
         if (qt>eqpar(t0_).and.qt<eqpar(t0_)+eqpar(delt_)) then
            where (abs(half*dpi-x(ix^S,2))<eqpar(deltheta_))
               tmp(ix^S)=tmp(ix^S)+eqpar(ce_)*(qt-eqpar(t0_)) &
                            /eqpar(delt_) /sin(x(ix^S,2)) &
                       *sin((half*dpi-x(ix^S,2))*dpi/eqpar(deltheta_)) &
                       *half*dpi/eqpar(deltheta_)
            end where
         else if (qt>=eqpar(t0_)+eqpar(delt_)) then
            where (abs(half*dpi-x(ix^S,2))<eqpar(deltheta_))
               tmp(ix^S)=tmp(ix^S)+eqpar(ce_)/sin(x(ix^S,2)) &
                       *sin((half*dpi-x(ix^S,2))*dpi/eqpar(deltheta_)) &
                       *half*dpi/eqpar(deltheta_)
            end where
         end if
      end if


      w(ixOmax1,ixO^SE,b1_)=(two*tmp(ixOmax1,ixO^SE) &
                  -w(ixOmax1+1,ixO^SE,b1_)*x(ixOmax1+1,ixO^SE,1)**2) &
                            /x(ixOmax1,ixO^SE,1)**2
      w(ixOmin1,ixO^SE,b1_)=(two*w(ixOmax1,ixO^SE,b1_)*x(ixOmax1,ixO^SE,1)**2 &
                  -w(ixOmax1+1,ixO^SE,b1_)*x(ixOmax1+1,ixO^SE,1)**2) &
                            /x(ixOmin1,ixO^SE,1)**2

   case (b2_)
      ixmin1=ixOmax1; ixmax1=ixOmax1; ix^LIM^DE=ixO^LIM^DE;

      tmp(ix^S)=eqpar(adip_)*sin(x(ix^S,2)) &
               +1.5d0*(eqpar(oct1_)+eqpar(oct2_) &
                       *cos(2.0d0*x(ix^S,2)))*sin(x(ix^S,2))

      if (iprob==2) then
         if (qt>eqpar(t0_).and.qt<eqpar(t0_)+eqpar(delt_)) then
            where (abs(half*dpi-x(ix^S,2))<eqpar(deltheta_))
               tmp(ix^S)=tmp(ix^S)+eqpar(ce_)*(qt-eqpar(t0_)) &
                            /eqpar(delt_) /sin(x(ix^S,2)) &
                      *cos((half*dpi-x(ix^S,2))*half*dpi/eqpar(deltheta_))**2
            end where
         else if (qt>=eqpar(t0_)+eqpar(delt_)) then
            where (abs(half*dpi-x(ix^S,2))<eqpar(deltheta_))
               tmp(ix^S)=tmp(ix^S)+eqpar(ce_)/sin(x(ix^S,2)) &
                      *cos((half*dpi-x(ix^S,2))*half*dpi/eqpar(deltheta_))**2
            end where
         end if
      end if

      w(ixOmax1,ixO^SE,b2_)=(two*tmp(ixOmax1,ixO^SE) &
                  -w(ixOmax1+1,ixO^SE,b2_)*x(ixOmax1+1,ixO^SE,1)) &
                            /x(ixOmax1,ixO^SE,1)
      w(ixOmin1,ixO^SE,b2_)=(two*w(ixOmax1,ixO^SE,b2_)*x(ixOmax1,ixO^SE,1) &
                  -w(ixOmax1+1,ixO^SE,b2_)*x(ixOmax1+1,ixO^SE,1)) &
                            /x(ixOmin1,ixO^SE,1)

   case (b3_)
      ! constancy of r B_phi 
      forall(ix1= ixO^LIM1:) w(ix1,ixO^SE,b3_)=w(ixOmax1+1,ixO^SE,b3_) &
                   *x(ixOmax1+1,ixO^SE,1)/x(ix1,ixO^SE,1)

      ! fix the base temperature
      w(ixO^S,e_) = (one/(eqpar(gamma_)-one))*w(ixO^S,rho_)*eqpar(tbase_) &
                  +half*( ^C&w(ixO^S,m^C_)**2+ )/w(ixO^S,rho_) &
                  +half*( ^C&w(ixO^S,b^C_)**2+ )
   case default
      call mpistop("Special boundary is not defined for this variable")
   end select
case (2)
   select case (iw)
   case (rho_)
      ! keep r**2*rho constant for each theta
      forall(ix1= ixO^LIM1:) w(ix1,ixO^SE,rho_)=w(ixOmin1-1,ixO^SE,rho_) &
                             *x(ixOmin1-1,ixO^SE,1)**2/x(ix1,ixO^SE,1)**2
   case (m1_)
      ! keep r**2*rho*vr constant for each theta
      forall(ix1= ixO^LIM1:) w(ix1,ixO^SE,m1_)=w(ixOmin1-1,ixO^SE,m1_) &
                            *x(ixOmin1-1,ixO^SE,1)**2/x(ix1,ixO^SE,1)**2
   case (m2_)
      ! keep r*rho*vtheta constant for each theta
      forall(ix1= ixO^LIM1:) w(ix1,ixO^SE,m2_)=w(ixOmin1-1,ixO^SE,m2_) &
                            *x(ixOmin1-1,ixO^SE,1)/x(ix1,ixO^SE,1)
   case (m3_)
      ! keep r*v_phi constant for each theta
      forall(ix1= ixO^LIM1:) w(ix1,ixO^SE,m3_)= &
             ( w(ixOmin1-1,ixO^SE,m3_)/w(ixOmin1-1,ixO^SE,rho_)+eqpar(zeta_) &
                *x(ixOmin1-1,ixO^SE,1)*dsin(x(ixOmin1-1,ixO^SE,2)) ) &
             *x(ixOmin1-1,ixO^SE,1) *(w(ix1,ixO^SE,rho_)/x(ix1,ixO^SE,1)) &
        -w(ix1,ixO^SE,rho_)*eqpar(zeta_)*x(ix1,ixO^SE,1)*dsin(x(ix1,ixO^SE,2))
   case (e_)
      ! see b3_
   case (b1_)
      ! keep r**2*Br constant for each theta
      forall(ix1= ixO^LIM1:) w(ix1,ixO^SE,b1_)=w(ixOmin1-1,ixO^SE,b1_)&
                            *x(ixOmin1-1,ixO^SE,1)**2/x(ix1,ixO^SE,1)**2
   case (b2_)
      ! keep r*Btheta constant for each theta
      forall(ix1= ixO^LIM1:) w(ix1,ixO^SE,b2_)=w(ixOmin1-1,ixO^SE,b2_)&
                            *x(ixOmin1-1,ixO^SE,1)/x(ix1,ixO^SE,1)
   case (b3_)
      ! keep r*B_phi constant for each theta
      forall(ix1= ixO^LIM1:) w(ix1,ixO^SE,b3_)=w(ixOmin1-1,ixO^SE,b3_)&
                            *x(ixOmin1-1,ixO^SE,1)/x(ix1,ixO^SE,1)

      tmp(ixOmin1-1,ixO^SE)=(eqpar(gamma_)-one)*(w(ixOmin1-1,ixO^SE,e_) &
          -half*( ^C&w(ixOmin1-1,ixO^SE,m^C_)**2+ )/w(ixOmin1-1,ixO^SE,rho_) &
          -half*( ^C&w(ixOmin1-1,ixO^SE,b^C_)**2+ ))  &
                   /w(ixOmin1-1,ixO^SE,rho_)
      forall(ix1= ixO^LIM1:) w(ix1,ixO^SE,e_) = &
          (one/(eqpar(gamma_)-one))*w(ix1,ixO^SE,rho_)*tmp(ixOmin1-1,ixO^SE)&
          +half*( ^C&w(ix1,ixO^SE,m^C_)**2+ )/w(ix1,ixO^SE,rho_)&
          +half*( ^C&w(ix1,ixO^SE,b^C_)**2+ )
   case default
      call mpistop("Special boundary is not defined for this variable")
   end select
case default
   call mpistop("Special boundary is not defined for this region")
end select

end subroutine specialbound_usr
!=============================================================================
subroutine specialsource(qdt,ixI^L,ixO^L,iw^LIM,qtC,wCT,qt,w,x)

include 'amrvacdef.f'

integer, intent(in) :: ixI^L, ixO^L, iw^LIM
double precision, intent(in) :: qdt, qtC, qt, wCT(ixI^S,1:nw), x(ixI^S,1:ndim)
double precision, intent(inout) :: w(ixI^S,1:nw)

! coordinate info can be used in region ixO

integer :: iw, ix^D
double precision :: theta, thetaabsz, r, thetach2, thetachr, arg, &
                    T0, sigma, tmp(ixG^T)
!-----------------------------------------------------------------------------

do iw= iw^LIM
   select case (iw)
   case (m1_)
      w(ixO^S,m1_) = w(ixO^S,m1_)-qdt*wCT(ixO^S,rho_) &
                     *half*eqpar(vescape_)**2 /x(ixO^S,1)**2 &
                     +qdt*wCT(ixO^S,rho_)*eqpar(zeta_)**2 &
                          *x(ixO^S,1)*dsin(x(ixO^S,2))**2 &
                     +qdt*two*eqpar(zeta_)*wCT(ixO^S,m3_)*dsin(x(ixO^S,2))
   case (m2_)
      w(ixO^S,m2_) = w(ixO^S,m2_)+qdt*wCT(ixO^S,rho_)*eqpar(zeta_)**2 &
                          *x(ixO^S,1)*dsin(x(ixO^S,2))*dcos(x(ixO^S,2)) &
                     +qdt*two*eqpar(zeta_)*wCT(ixO^S,m3_)*dcos(x(ixO^S,2))
   case (m3_)
      w(ixO^S,m3_) = w(ixO^S,m3_)-qdt*two*eqpar(zeta_)*(wCT(ixO^S,m1_) &
                          *dsin(x(ixO^S,2))+wCT(ixO^S,m2_)*dcos(x(ixO^S,2)))
   case (e_)
      w(ixO^S,e_) = w(ixO^S,e_)-qdt*wCT(ixO^S,m1_) &
                 *0.5d0*(eqpar(vescape_)**2) /x(ixO^S,1)**2 &
                 +qdt*wCT(ixO^S,m1_)*eqpar(zeta_)**2 &
                          *x(ixO^S,1)*dsin(x(ixO^S,2))**2 &
                 +qdt*wCT(ixO^S,m2_)*eqpar(zeta_)**2 &
                          *x(ixO^S,1)*dsin(x(ixO^S,2))*dcos(x(ixO^S,2))

      call getpthermal(wCT,ixI^L,ixO^L,tmp)
      {do ix^DB= ixOmin^DB,ixOmax^DB \}
         ! thetaabsz is running from both poles to equator 0->pi/2
         theta=x(ix^D,2)
         if (theta <= half*dpi) then
            thetaabsz=theta
         else
            thetaabsz=dpi-theta
         endif
         r=x(ix^D,1)
         if (r<=7.0d0) then
            thetachr=dasin(dsqrt(dsin(eqpar(thetach_))**2+ &
                (dcos(eqpar(thetach_))**2)*(r-1.0d0)/8.0d0))
         else
            thetach2=dasin(dsqrt(dsin(eqpar(thetach_))**2+ &
                (dcos(eqpar(thetach_))**2)*6.0d0/8.0d0))
            arg=dsin(thetach2)**2+(dcos(thetach2)**2)*(r-7.0d0)/40.0d0
            if (arg>=1.0d0) then
               thetachr=half*dpi
            else
               thetachr=dasin(dsqrt(arg))
            endif
         end if
         if (thetaabsz<=thetachr) then
            T0 = eqpar(T0_pole_)
            sigma = eqpar(sigma0_)* &
                   (2.0d0-(dsin(theta)/dsin(thetachr))**2)
         else
            T0 = eqpar(T0_equator_)
            sigma = eqpar(sigma0_)
         end if
         w(ix^D,e_)=w(ix^D,e_)+qdt*eqpar(h0_)*wCT(ix^D,rho_)* &
                    exp(-( (r -1.0d0)/sigma )**2) * &
                    (T0 - tmp(ix^D)/wCT(ix^D,rho_))
      {end do\}

   end select
end do

end subroutine specialsource
!=============================================================================
subroutine getdt_special(w,ixG^L,ix^L,dtnew,dx^D,x)

include 'amrvacdef.f'

integer, intent(in) :: ixG^L,ix^L
double precision, intent(in) :: dx^D, w(ixG^S,1:nw),x(ixG^S,1:ndim)
double precision, intent(inout) :: dtnew
!-----------------------------------------------------------------------------
oktest=index(teststr,'getdt')>=1

if(oktest) write(*,*)'getdt_special'
dtnew=bigdouble
if(oktest) write(unitterm,*)'GetDtSpecial dt=',dtnew

end subroutine getdt_special
!=============================================================================
subroutine specialeta(w,ixI^L,ix^L,idirmin,x,current,eta)

! Set the "eta" array for resistive MHD based on w or the
! "current" variable which has components between idirmin and 3.

include 'amrvacdef.f'

integer, intent(in) :: ixI^L, ix^L, idirmin
double precision, intent(in) :: w(ixI^S,nw), x(ixI^S,1:ndim)

double precision :: current(ixG^T,7-2*ndir:3), eta(ixG^T)
!-----------------------------------------------------------------------------

!  eta(ix^S)=...

call mpistop("specialeta is not defined")

end subroutine specialeta
!=============================================================================
subroutine specialrefine_grid(igrid,level,ixG^L,ix^L,qt,w,x,refine,coarsen)

! Enforce additional refinement or coarsening
! One can use the coordinate info in x and/or time qt=t_n and w(t_n) values w.

include 'amrvacdef.f'

integer, intent(in) :: igrid, level, ix^L, ixG^L
double precision, intent(in) :: qt, w(ixG^S,nw), x(ixG^S,ndim)
integer, intent(inout) :: refine, coarsen
!-----------------------------------------------------------------------------

end subroutine specialrefine_grid
!=============================================================================
subroutine specialvarforerrest(ixI^L,ixO^L,iflag,w,var)

! this is the place to compute a local auxiliary variable to be used
! as refinement criterion for the Lohner error estimator only
!  -->it is then requiring and iflag>nw
! note that ixO=ixI=ixG, hence the term local (gradients need special attention!)

include 'amrvacdef.f'

integer, intent(in)          :: ixI^L,ixO^L,iflag
double precision, intent(in) :: w(ixI^S,1:nw)
double precision, intent(out):: var(ixG^T)
!-----------------------------------------------------------------------------

if (iflag >nw)call mpistop(' iflag> nw, make change in parfile or in user file')

var(ixI^S) = zero

end subroutine specialvarforerrest

!=============================================================================
subroutine bc_int(qt,ixG^L,ixO^L,w,x)

! internal boundary, user defined
!
! This subroutine can be used to artificially overwrite ALL conservative 
! variables in a user-selected region of the mesh, and thereby act as
! an internal boundary region. It is called just before external (ghost cell)
! boundary regions will be set by the BC selection. Here, you could e.g. 
! want to introduce an extra variable (nwextra, to be distinguished from nwaux)
! which can be used to identify the internal boundary region location.
! Its effect should always be local as it acts on the mesh.
!

include 'amrvacdef.f'

integer, intent(in) :: ixG^L,ixO^L
double precision, intent(in) :: qt
double precision, intent(inout) :: w(ixG^S,1:nw)
double precision, intent(in) :: x(ixG^S,1:ndim)

! .. local ..
!logical :: patchw(ixG^T)
!----------------------------------------------------------------------------

call mpistop("bc_int not defined")

! just to give an example for relativistic MHD
!  -----------------------------------------
!patchw(ixO^S)=.true.
!where (({^D&x(ixO^S,^D)**2+})<half**2.0d0) 
!    patchw(ixO^S) = .false.
!  ^C&w(ixO^S,v^C_)=zero;
!  ^C&w(ixO^S,b^C_)=zero;
!    w(ixO^S,b3_) = one
!    w(ixO^S,v1_) = 0.99
!    w(ixO^S,rho_) = 1.d0
!    w(ixO^S,pp_)  = 2.0d0
!    w(ixO^S,lfac_)=one/dsqrt(one-({^C&w(ixO^S,v^C_)**2.0d0+}))
!end where
!!if (useprimitiveRel) then
!!  where (({^D&x(ixO^S,^D)**2+})<half**2.0d0) 
!!  {^C&w(ixO^S,u^C_)=w(ixO^S,lfac_)*w(ixO^S,v^C_);\}
!!  end where
!!endif
!call conserve(ixG^L,ixO^L,w,patchw)

end subroutine bc_int
!=============================================================================
!=============================================================================
! amrvacusr.t.mhdwind
!=============================================================================
